/*
Treasury Management API

A comprehensive API for managing addresses, offering endpoints for creation, update, deletion, and retrieval of address data.

API version: 1.0
Contact: support_cept@indiapost.gov.in
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the HandlerCashDenomination type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HandlerCashDenomination{}

// HandlerCashDenomination struct for HandlerCashDenomination
type HandlerCashDenomination struct {
	Count *int32 `json:"count,omitempty"`
	CurrencyId *string `json:"currency_id,omitempty"`
	CurrencyType *string `json:"currency_type,omitempty"`
	Denomination *int32 `json:"denomination,omitempty"`
}

// NewHandlerCashDenomination instantiates a new HandlerCashDenomination object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHandlerCashDenomination() *HandlerCashDenomination {
	this := HandlerCashDenomination{}
	return &this
}

// NewHandlerCashDenominationWithDefaults instantiates a new HandlerCashDenomination object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHandlerCashDenominationWithDefaults() *HandlerCashDenomination {
	this := HandlerCashDenomination{}
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *HandlerCashDenomination) GetCount() int32 {
	if o == nil || IsNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlerCashDenomination) GetCountOk() (*int32, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *HandlerCashDenomination) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *HandlerCashDenomination) SetCount(v int32) {
	o.Count = &v
}

// GetCurrencyId returns the CurrencyId field value if set, zero value otherwise.
func (o *HandlerCashDenomination) GetCurrencyId() string {
	if o == nil || IsNil(o.CurrencyId) {
		var ret string
		return ret
	}
	return *o.CurrencyId
}

// GetCurrencyIdOk returns a tuple with the CurrencyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlerCashDenomination) GetCurrencyIdOk() (*string, bool) {
	if o == nil || IsNil(o.CurrencyId) {
		return nil, false
	}
	return o.CurrencyId, true
}

// HasCurrencyId returns a boolean if a field has been set.
func (o *HandlerCashDenomination) HasCurrencyId() bool {
	if o != nil && !IsNil(o.CurrencyId) {
		return true
	}

	return false
}

// SetCurrencyId gets a reference to the given string and assigns it to the CurrencyId field.
func (o *HandlerCashDenomination) SetCurrencyId(v string) {
	o.CurrencyId = &v
}

// GetCurrencyType returns the CurrencyType field value if set, zero value otherwise.
func (o *HandlerCashDenomination) GetCurrencyType() string {
	if o == nil || IsNil(o.CurrencyType) {
		var ret string
		return ret
	}
	return *o.CurrencyType
}

// GetCurrencyTypeOk returns a tuple with the CurrencyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlerCashDenomination) GetCurrencyTypeOk() (*string, bool) {
	if o == nil || IsNil(o.CurrencyType) {
		return nil, false
	}
	return o.CurrencyType, true
}

// HasCurrencyType returns a boolean if a field has been set.
func (o *HandlerCashDenomination) HasCurrencyType() bool {
	if o != nil && !IsNil(o.CurrencyType) {
		return true
	}

	return false
}

// SetCurrencyType gets a reference to the given string and assigns it to the CurrencyType field.
func (o *HandlerCashDenomination) SetCurrencyType(v string) {
	o.CurrencyType = &v
}

// GetDenomination returns the Denomination field value if set, zero value otherwise.
func (o *HandlerCashDenomination) GetDenomination() int32 {
	if o == nil || IsNil(o.Denomination) {
		var ret int32
		return ret
	}
	return *o.Denomination
}

// GetDenominationOk returns a tuple with the Denomination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlerCashDenomination) GetDenominationOk() (*int32, bool) {
	if o == nil || IsNil(o.Denomination) {
		return nil, false
	}
	return o.Denomination, true
}

// HasDenomination returns a boolean if a field has been set.
func (o *HandlerCashDenomination) HasDenomination() bool {
	if o != nil && !IsNil(o.Denomination) {
		return true
	}

	return false
}

// SetDenomination gets a reference to the given int32 and assigns it to the Denomination field.
func (o *HandlerCashDenomination) SetDenomination(v int32) {
	o.Denomination = &v
}

func (o HandlerCashDenomination) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HandlerCashDenomination) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.CurrencyId) {
		toSerialize["currency_id"] = o.CurrencyId
	}
	if !IsNil(o.CurrencyType) {
		toSerialize["currency_type"] = o.CurrencyType
	}
	if !IsNil(o.Denomination) {
		toSerialize["denomination"] = o.Denomination
	}
	return toSerialize, nil
}

type NullableHandlerCashDenomination struct {
	value *HandlerCashDenomination
	isSet bool
}

func (v NullableHandlerCashDenomination) Get() *HandlerCashDenomination {
	return v.value
}

func (v *NullableHandlerCashDenomination) Set(val *HandlerCashDenomination) {
	v.value = val
	v.isSet = true
}

func (v NullableHandlerCashDenomination) IsSet() bool {
	return v.isSet
}

func (v *NullableHandlerCashDenomination) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHandlerCashDenomination(val *HandlerCashDenomination) *NullableHandlerCashDenomination {
	return &NullableHandlerCashDenomination{value: val, isSet: true}
}

func (v NullableHandlerCashDenomination) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHandlerCashDenomination) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


