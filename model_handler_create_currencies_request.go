/*
Treasury Management API

A comprehensive API for managing addresses, offering endpoints for creation, update, deletion, and retrieval of address data.

API version: 1.0
Contact: support_cept@indiapost.gov.in
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HandlerCreateCurrenciesRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HandlerCreateCurrenciesRequest{}

// HandlerCreateCurrenciesRequest struct for HandlerCreateCurrenciesRequest
type HandlerCreateCurrenciesRequest struct {
	CurrencyType *string `json:"currency_type,omitempty"`
	Denomination float32 `json:"denomination"`
	EnteredByUser string `json:"entered_by_user"`
	ValidFrom string `json:"valid_from"`
}

type _HandlerCreateCurrenciesRequest HandlerCreateCurrenciesRequest

// NewHandlerCreateCurrenciesRequest instantiates a new HandlerCreateCurrenciesRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHandlerCreateCurrenciesRequest(denomination float32, enteredByUser string, validFrom string) *HandlerCreateCurrenciesRequest {
	this := HandlerCreateCurrenciesRequest{}
	this.Denomination = denomination
	this.EnteredByUser = enteredByUser
	this.ValidFrom = validFrom
	return &this
}

// NewHandlerCreateCurrenciesRequestWithDefaults instantiates a new HandlerCreateCurrenciesRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHandlerCreateCurrenciesRequestWithDefaults() *HandlerCreateCurrenciesRequest {
	this := HandlerCreateCurrenciesRequest{}
	return &this
}

// GetCurrencyType returns the CurrencyType field value if set, zero value otherwise.
func (o *HandlerCreateCurrenciesRequest) GetCurrencyType() string {
	if o == nil || IsNil(o.CurrencyType) {
		var ret string
		return ret
	}
	return *o.CurrencyType
}

// GetCurrencyTypeOk returns a tuple with the CurrencyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlerCreateCurrenciesRequest) GetCurrencyTypeOk() (*string, bool) {
	if o == nil || IsNil(o.CurrencyType) {
		return nil, false
	}
	return o.CurrencyType, true
}

// HasCurrencyType returns a boolean if a field has been set.
func (o *HandlerCreateCurrenciesRequest) HasCurrencyType() bool {
	if o != nil && !IsNil(o.CurrencyType) {
		return true
	}

	return false
}

// SetCurrencyType gets a reference to the given string and assigns it to the CurrencyType field.
func (o *HandlerCreateCurrenciesRequest) SetCurrencyType(v string) {
	o.CurrencyType = &v
}

// GetDenomination returns the Denomination field value
func (o *HandlerCreateCurrenciesRequest) GetDenomination() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Denomination
}

// GetDenominationOk returns a tuple with the Denomination field value
// and a boolean to check if the value has been set.
func (o *HandlerCreateCurrenciesRequest) GetDenominationOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Denomination, true
}

// SetDenomination sets field value
func (o *HandlerCreateCurrenciesRequest) SetDenomination(v float32) {
	o.Denomination = v
}

// GetEnteredByUser returns the EnteredByUser field value
func (o *HandlerCreateCurrenciesRequest) GetEnteredByUser() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EnteredByUser
}

// GetEnteredByUserOk returns a tuple with the EnteredByUser field value
// and a boolean to check if the value has been set.
func (o *HandlerCreateCurrenciesRequest) GetEnteredByUserOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnteredByUser, true
}

// SetEnteredByUser sets field value
func (o *HandlerCreateCurrenciesRequest) SetEnteredByUser(v string) {
	o.EnteredByUser = v
}

// GetValidFrom returns the ValidFrom field value
func (o *HandlerCreateCurrenciesRequest) GetValidFrom() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ValidFrom
}

// GetValidFromOk returns a tuple with the ValidFrom field value
// and a boolean to check if the value has been set.
func (o *HandlerCreateCurrenciesRequest) GetValidFromOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValidFrom, true
}

// SetValidFrom sets field value
func (o *HandlerCreateCurrenciesRequest) SetValidFrom(v string) {
	o.ValidFrom = v
}

func (o HandlerCreateCurrenciesRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HandlerCreateCurrenciesRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CurrencyType) {
		toSerialize["currency_type"] = o.CurrencyType
	}
	toSerialize["denomination"] = o.Denomination
	toSerialize["entered_by_user"] = o.EnteredByUser
	toSerialize["valid_from"] = o.ValidFrom
	return toSerialize, nil
}

func (o *HandlerCreateCurrenciesRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"denomination",
		"entered_by_user",
		"valid_from",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHandlerCreateCurrenciesRequest := _HandlerCreateCurrenciesRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHandlerCreateCurrenciesRequest)

	if err != nil {
		return err
	}

	*o = HandlerCreateCurrenciesRequest(varHandlerCreateCurrenciesRequest)

	return err
}

type NullableHandlerCreateCurrenciesRequest struct {
	value *HandlerCreateCurrenciesRequest
	isSet bool
}

func (v NullableHandlerCreateCurrenciesRequest) Get() *HandlerCreateCurrenciesRequest {
	return v.value
}

func (v *NullableHandlerCreateCurrenciesRequest) Set(val *HandlerCreateCurrenciesRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableHandlerCreateCurrenciesRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableHandlerCreateCurrenciesRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHandlerCreateCurrenciesRequest(val *HandlerCreateCurrenciesRequest) *NullableHandlerCreateCurrenciesRequest {
	return &NullableHandlerCreateCurrenciesRequest{value: val, isSet: true}
}

func (v NullableHandlerCreateCurrenciesRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHandlerCreateCurrenciesRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


