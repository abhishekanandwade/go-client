/*
Treasury Management API

A comprehensive API for managing addresses, offering endpoints for creation, update, deletion, and retrieval of address data.

API version: 1.0
Contact: support_cept@indiapost.gov.in
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HandlerCreateIPOSalesRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HandlerCreateIPOSalesRequest{}

// HandlerCreateIPOSalesRequest struct for HandlerCreateIPOSalesRequest
type HandlerCreateIPOSalesRequest struct {
	IsSingleHand *bool `json:"is_single_hand,omitempty"`
	OfficeId int32 `json:"office_id"`
	SaleAmount float32 `json:"sale_amount"`
	SaleCommission float32 `json:"sale_commission"`
	SaleDetails []int32 `json:"sale_details"`
	SoldTo string `json:"sold_to"`
	UserId int32 `json:"user_id"`
}

type _HandlerCreateIPOSalesRequest HandlerCreateIPOSalesRequest

// NewHandlerCreateIPOSalesRequest instantiates a new HandlerCreateIPOSalesRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHandlerCreateIPOSalesRequest(officeId int32, saleAmount float32, saleCommission float32, saleDetails []int32, soldTo string, userId int32) *HandlerCreateIPOSalesRequest {
	this := HandlerCreateIPOSalesRequest{}
	this.OfficeId = officeId
	this.SaleAmount = saleAmount
	this.SaleCommission = saleCommission
	this.SaleDetails = saleDetails
	this.SoldTo = soldTo
	this.UserId = userId
	return &this
}

// NewHandlerCreateIPOSalesRequestWithDefaults instantiates a new HandlerCreateIPOSalesRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHandlerCreateIPOSalesRequestWithDefaults() *HandlerCreateIPOSalesRequest {
	this := HandlerCreateIPOSalesRequest{}
	return &this
}

// GetIsSingleHand returns the IsSingleHand field value if set, zero value otherwise.
func (o *HandlerCreateIPOSalesRequest) GetIsSingleHand() bool {
	if o == nil || IsNil(o.IsSingleHand) {
		var ret bool
		return ret
	}
	return *o.IsSingleHand
}

// GetIsSingleHandOk returns a tuple with the IsSingleHand field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlerCreateIPOSalesRequest) GetIsSingleHandOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSingleHand) {
		return nil, false
	}
	return o.IsSingleHand, true
}

// HasIsSingleHand returns a boolean if a field has been set.
func (o *HandlerCreateIPOSalesRequest) HasIsSingleHand() bool {
	if o != nil && !IsNil(o.IsSingleHand) {
		return true
	}

	return false
}

// SetIsSingleHand gets a reference to the given bool and assigns it to the IsSingleHand field.
func (o *HandlerCreateIPOSalesRequest) SetIsSingleHand(v bool) {
	o.IsSingleHand = &v
}

// GetOfficeId returns the OfficeId field value
func (o *HandlerCreateIPOSalesRequest) GetOfficeId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.OfficeId
}

// GetOfficeIdOk returns a tuple with the OfficeId field value
// and a boolean to check if the value has been set.
func (o *HandlerCreateIPOSalesRequest) GetOfficeIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OfficeId, true
}

// SetOfficeId sets field value
func (o *HandlerCreateIPOSalesRequest) SetOfficeId(v int32) {
	o.OfficeId = v
}

// GetSaleAmount returns the SaleAmount field value
func (o *HandlerCreateIPOSalesRequest) GetSaleAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.SaleAmount
}

// GetSaleAmountOk returns a tuple with the SaleAmount field value
// and a boolean to check if the value has been set.
func (o *HandlerCreateIPOSalesRequest) GetSaleAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SaleAmount, true
}

// SetSaleAmount sets field value
func (o *HandlerCreateIPOSalesRequest) SetSaleAmount(v float32) {
	o.SaleAmount = v
}

// GetSaleCommission returns the SaleCommission field value
func (o *HandlerCreateIPOSalesRequest) GetSaleCommission() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.SaleCommission
}

// GetSaleCommissionOk returns a tuple with the SaleCommission field value
// and a boolean to check if the value has been set.
func (o *HandlerCreateIPOSalesRequest) GetSaleCommissionOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SaleCommission, true
}

// SetSaleCommission sets field value
func (o *HandlerCreateIPOSalesRequest) SetSaleCommission(v float32) {
	o.SaleCommission = v
}

// GetSaleDetails returns the SaleDetails field value
func (o *HandlerCreateIPOSalesRequest) GetSaleDetails() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.SaleDetails
}

// GetSaleDetailsOk returns a tuple with the SaleDetails field value
// and a boolean to check if the value has been set.
func (o *HandlerCreateIPOSalesRequest) GetSaleDetailsOk() ([]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SaleDetails, true
}

// SetSaleDetails sets field value
func (o *HandlerCreateIPOSalesRequest) SetSaleDetails(v []int32) {
	o.SaleDetails = v
}

// GetSoldTo returns the SoldTo field value
func (o *HandlerCreateIPOSalesRequest) GetSoldTo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SoldTo
}

// GetSoldToOk returns a tuple with the SoldTo field value
// and a boolean to check if the value has been set.
func (o *HandlerCreateIPOSalesRequest) GetSoldToOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SoldTo, true
}

// SetSoldTo sets field value
func (o *HandlerCreateIPOSalesRequest) SetSoldTo(v string) {
	o.SoldTo = v
}

// GetUserId returns the UserId field value
func (o *HandlerCreateIPOSalesRequest) GetUserId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *HandlerCreateIPOSalesRequest) GetUserIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *HandlerCreateIPOSalesRequest) SetUserId(v int32) {
	o.UserId = v
}

func (o HandlerCreateIPOSalesRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HandlerCreateIPOSalesRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsSingleHand) {
		toSerialize["is_single_hand"] = o.IsSingleHand
	}
	toSerialize["office_id"] = o.OfficeId
	toSerialize["sale_amount"] = o.SaleAmount
	toSerialize["sale_commission"] = o.SaleCommission
	toSerialize["sale_details"] = o.SaleDetails
	toSerialize["sold_to"] = o.SoldTo
	toSerialize["user_id"] = o.UserId
	return toSerialize, nil
}

func (o *HandlerCreateIPOSalesRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"office_id",
		"sale_amount",
		"sale_commission",
		"sale_details",
		"sold_to",
		"user_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHandlerCreateIPOSalesRequest := _HandlerCreateIPOSalesRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHandlerCreateIPOSalesRequest)

	if err != nil {
		return err
	}

	*o = HandlerCreateIPOSalesRequest(varHandlerCreateIPOSalesRequest)

	return err
}

type NullableHandlerCreateIPOSalesRequest struct {
	value *HandlerCreateIPOSalesRequest
	isSet bool
}

func (v NullableHandlerCreateIPOSalesRequest) Get() *HandlerCreateIPOSalesRequest {
	return v.value
}

func (v *NullableHandlerCreateIPOSalesRequest) Set(val *HandlerCreateIPOSalesRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableHandlerCreateIPOSalesRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableHandlerCreateIPOSalesRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHandlerCreateIPOSalesRequest(val *HandlerCreateIPOSalesRequest) *NullableHandlerCreateIPOSalesRequest {
	return &NullableHandlerCreateIPOSalesRequest{value: val, isSet: true}
}

func (v NullableHandlerCreateIPOSalesRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHandlerCreateIPOSalesRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


