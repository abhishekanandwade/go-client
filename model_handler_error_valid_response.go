/*
Treasury Management API

A comprehensive API for managing addresses, offering endpoints for creation, update, deletion, and retrieval of address data.

API version: 1.0
Contact: support_cept@indiapost.gov.in
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the HandlerErrorValidResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HandlerErrorValidResponse{}

// HandlerErrorValidResponse struct for HandlerErrorValidResponse
type HandlerErrorValidResponse struct {
	Errorno []string `json:"errorno,omitempty"`
	Message []string `json:"message,omitempty"`
	Success *bool `json:"success,omitempty"`
}

// NewHandlerErrorValidResponse instantiates a new HandlerErrorValidResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHandlerErrorValidResponse() *HandlerErrorValidResponse {
	this := HandlerErrorValidResponse{}
	return &this
}

// NewHandlerErrorValidResponseWithDefaults instantiates a new HandlerErrorValidResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHandlerErrorValidResponseWithDefaults() *HandlerErrorValidResponse {
	this := HandlerErrorValidResponse{}
	return &this
}

// GetErrorno returns the Errorno field value if set, zero value otherwise.
func (o *HandlerErrorValidResponse) GetErrorno() []string {
	if o == nil || IsNil(o.Errorno) {
		var ret []string
		return ret
	}
	return o.Errorno
}

// GetErrornoOk returns a tuple with the Errorno field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlerErrorValidResponse) GetErrornoOk() ([]string, bool) {
	if o == nil || IsNil(o.Errorno) {
		return nil, false
	}
	return o.Errorno, true
}

// HasErrorno returns a boolean if a field has been set.
func (o *HandlerErrorValidResponse) HasErrorno() bool {
	if o != nil && !IsNil(o.Errorno) {
		return true
	}

	return false
}

// SetErrorno gets a reference to the given []string and assigns it to the Errorno field.
func (o *HandlerErrorValidResponse) SetErrorno(v []string) {
	o.Errorno = v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *HandlerErrorValidResponse) GetMessage() []string {
	if o == nil || IsNil(o.Message) {
		var ret []string
		return ret
	}
	return o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlerErrorValidResponse) GetMessageOk() ([]string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *HandlerErrorValidResponse) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given []string and assigns it to the Message field.
func (o *HandlerErrorValidResponse) SetMessage(v []string) {
	o.Message = v
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *HandlerErrorValidResponse) GetSuccess() bool {
	if o == nil || IsNil(o.Success) {
		var ret bool
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlerErrorValidResponse) GetSuccessOk() (*bool, bool) {
	if o == nil || IsNil(o.Success) {
		return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *HandlerErrorValidResponse) HasSuccess() bool {
	if o != nil && !IsNil(o.Success) {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given bool and assigns it to the Success field.
func (o *HandlerErrorValidResponse) SetSuccess(v bool) {
	o.Success = &v
}

func (o HandlerErrorValidResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HandlerErrorValidResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Errorno) {
		toSerialize["errorno"] = o.Errorno
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Success) {
		toSerialize["success"] = o.Success
	}
	return toSerialize, nil
}

type NullableHandlerErrorValidResponse struct {
	value *HandlerErrorValidResponse
	isSet bool
}

func (v NullableHandlerErrorValidResponse) Get() *HandlerErrorValidResponse {
	return v.value
}

func (v *NullableHandlerErrorValidResponse) Set(val *HandlerErrorValidResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableHandlerErrorValidResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableHandlerErrorValidResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHandlerErrorValidResponse(val *HandlerErrorValidResponse) *NullableHandlerErrorValidResponse {
	return &NullableHandlerErrorValidResponse{value: val, isSet: true}
}

func (v NullableHandlerErrorValidResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHandlerErrorValidResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


