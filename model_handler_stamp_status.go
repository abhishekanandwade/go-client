/*
Treasury Management API

A comprehensive API for managing addresses, offering endpoints for creation, update, deletion, and retrieval of address data.

API version: 1.0
Contact: support_cept@indiapost.gov.in
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// HandlerStampStatus the model 'HandlerStampStatus'
type HandlerStampStatus string

// List of handler.stampStatus
const (
	all HandlerStampStatus = "all"
	byID HandlerStampStatus = "by-id"
	remittance HandlerStampStatus = "remittance"
	linked HandlerStampStatus = "linked"
	configured HandlerStampStatus = "configured"
	pending HandlerStampStatus = "pending"
	approve HandlerStampStatus = "approve"
	process HandlerStampStatus = "process"
	acctcode HandlerStampStatus = "acct-code"
	errs HandlerStampStatus = "errors"
	transfer HandlerStampStatus = "transfer"
	cashTransfer HandlerStampStatus = "cash-transfer"
	disposal HandlerStampStatus = "disposal"
)

// All allowed values of HandlerStampStatus enum
var AllowedHandlerStampStatusEnumValues = []HandlerStampStatus{
	"all",
	"by-id",
	"remittance",
	"linked",
	"configured",
	"pending",
	"approve",
	"process",
	"acct-code",
	"errors",
	"transfer",
	"cash-transfer",
	"disposal",
}

func (v *HandlerStampStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := HandlerStampStatus(value)
	for _, existing := range AllowedHandlerStampStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid HandlerStampStatus", value)
}

// NewHandlerStampStatusFromValue returns a pointer to a valid HandlerStampStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHandlerStampStatusFromValue(v string) (*HandlerStampStatus, error) {
	ev := HandlerStampStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for HandlerStampStatus: valid values are %v", v, AllowedHandlerStampStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HandlerStampStatus) IsValid() bool {
	for _, existing := range AllowedHandlerStampStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to handler.stampStatus value
func (v HandlerStampStatus) Ptr() *HandlerStampStatus {
	return &v
}

type NullableHandlerStampStatus struct {
	value *HandlerStampStatus
	isSet bool
}

func (v NullableHandlerStampStatus) Get() *HandlerStampStatus {
	return v.value
}

func (v *NullableHandlerStampStatus) Set(val *HandlerStampStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableHandlerStampStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableHandlerStampStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHandlerStampStatus(val *HandlerStampStatus) *NullableHandlerStampStatus {
	return &NullableHandlerStampStatus{value: val, isSet: true}
}

func (v NullableHandlerStampStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHandlerStampStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

