/*
Treasury Management API

A comprehensive API for managing addresses, offering endpoints for creation, update, deletion, and retrieval of address data.

API version: 1.0
Contact: support_cept@indiapost.gov.in
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the HandlerTemporalcombinedCashbagcloseRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HandlerTemporalcombinedCashbagcloseRequest{}

// HandlerTemporalcombinedCashbagcloseRequest struct for HandlerTemporalcombinedCashbagcloseRequest
type HandlerTemporalcombinedCashbagcloseRequest struct {
	AcBagId *string `json:"ac_bag_id,omitempty"`
	AcBagWeight *float32 `json:"ac_bag_weight,omitempty"`
	ArticleCount *int32 `json:"article_count,omitempty"`
	ArticleDetail []HandlerArticleDetail `json:"article_detail,omitempty"`
	ArticleWeight *float32 `json:"article_weight,omitempty"`
	BagCount *int32 `json:"bag_count,omitempty"`
	BagNumber *string `json:"bag_number,omitempty"`
	BagType *string `json:"bag_type,omitempty"`
	BagWeight *float32 `json:"bag_weight,omitempty"`
	BoBagContent []HandlerBoBagContent `json:"bo_bag_content,omitempty"`
	CashBagWeight *float32 `json:"cash_bag_weight,omitempty"`
	CashDenomination []HandlerCashDenomination `json:"cash_denomination,omitempty"`
	CashTotalAmount *float32 `json:"cash_total_amount,omitempty"`
	CashbagId *string `json:"cashbag_id,omitempty"`
	ChequeDetails []HandlerChequeDetail `json:"cheque_details,omitempty"`
	CreatedBy *string `json:"created_by,omitempty"`
	CreatedDate *string `json:"created_date,omitempty"`
	DeliveryType *string `json:"delivery_type,omitempty"`
	DocumentList *string `json:"document_list,omitempty"`
	EmoList []HandlerEmoDetail `json:"emo_list,omitempty"`
	EmoTotalAmount *float32 `json:"emo_total_amount,omitempty"`
	EventType *string `json:"event_type,omitempty"`
	FromOfficeId *int32 `json:"from_office_id,omitempty"`
	InsuredFlag *bool `json:"insured_flag,omitempty"`
	IpoDetail []HandlerIPODetail `json:"ipo_detail,omitempty"`
	ReceiverOfficeId *int32 `json:"receiver_office_id,omitempty"`
	Remark *string `json:"remark,omitempty"`
	SenderOfficeId *int32 `json:"sender_office_id,omitempty"`
	SetDate *string `json:"set_date,omitempty"`
	SetNumber *string `json:"set_number,omitempty"`
	StampDetail []HandlerStampDetail `json:"stamp_detail,omitempty"`
	StationeryDetail []HandlerStationeryDetail `json:"stationery_detail,omitempty"`
	ToOfficeId *int32 `json:"to_office_id,omitempty"`
	UserId *int32 `json:"user_id,omitempty"`
}

// NewHandlerTemporalcombinedCashbagcloseRequest instantiates a new HandlerTemporalcombinedCashbagcloseRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHandlerTemporalcombinedCashbagcloseRequest() *HandlerTemporalcombinedCashbagcloseRequest {
	this := HandlerTemporalcombinedCashbagcloseRequest{}
	return &this
}

// NewHandlerTemporalcombinedCashbagcloseRequestWithDefaults instantiates a new HandlerTemporalcombinedCashbagcloseRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHandlerTemporalcombinedCashbagcloseRequestWithDefaults() *HandlerTemporalcombinedCashbagcloseRequest {
	this := HandlerTemporalcombinedCashbagcloseRequest{}
	return &this
}

// GetAcBagId returns the AcBagId field value if set, zero value otherwise.
func (o *HandlerTemporalcombinedCashbagcloseRequest) GetAcBagId() string {
	if o == nil || IsNil(o.AcBagId) {
		var ret string
		return ret
	}
	return *o.AcBagId
}

// GetAcBagIdOk returns a tuple with the AcBagId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlerTemporalcombinedCashbagcloseRequest) GetAcBagIdOk() (*string, bool) {
	if o == nil || IsNil(o.AcBagId) {
		return nil, false
	}
	return o.AcBagId, true
}

// HasAcBagId returns a boolean if a field has been set.
func (o *HandlerTemporalcombinedCashbagcloseRequest) HasAcBagId() bool {
	if o != nil && !IsNil(o.AcBagId) {
		return true
	}

	return false
}

// SetAcBagId gets a reference to the given string and assigns it to the AcBagId field.
func (o *HandlerTemporalcombinedCashbagcloseRequest) SetAcBagId(v string) {
	o.AcBagId = &v
}

// GetAcBagWeight returns the AcBagWeight field value if set, zero value otherwise.
func (o *HandlerTemporalcombinedCashbagcloseRequest) GetAcBagWeight() float32 {
	if o == nil || IsNil(o.AcBagWeight) {
		var ret float32
		return ret
	}
	return *o.AcBagWeight
}

// GetAcBagWeightOk returns a tuple with the AcBagWeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlerTemporalcombinedCashbagcloseRequest) GetAcBagWeightOk() (*float32, bool) {
	if o == nil || IsNil(o.AcBagWeight) {
		return nil, false
	}
	return o.AcBagWeight, true
}

// HasAcBagWeight returns a boolean if a field has been set.
func (o *HandlerTemporalcombinedCashbagcloseRequest) HasAcBagWeight() bool {
	if o != nil && !IsNil(o.AcBagWeight) {
		return true
	}

	return false
}

// SetAcBagWeight gets a reference to the given float32 and assigns it to the AcBagWeight field.
func (o *HandlerTemporalcombinedCashbagcloseRequest) SetAcBagWeight(v float32) {
	o.AcBagWeight = &v
}

// GetArticleCount returns the ArticleCount field value if set, zero value otherwise.
func (o *HandlerTemporalcombinedCashbagcloseRequest) GetArticleCount() int32 {
	if o == nil || IsNil(o.ArticleCount) {
		var ret int32
		return ret
	}
	return *o.ArticleCount
}

// GetArticleCountOk returns a tuple with the ArticleCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlerTemporalcombinedCashbagcloseRequest) GetArticleCountOk() (*int32, bool) {
	if o == nil || IsNil(o.ArticleCount) {
		return nil, false
	}
	return o.ArticleCount, true
}

// HasArticleCount returns a boolean if a field has been set.
func (o *HandlerTemporalcombinedCashbagcloseRequest) HasArticleCount() bool {
	if o != nil && !IsNil(o.ArticleCount) {
		return true
	}

	return false
}

// SetArticleCount gets a reference to the given int32 and assigns it to the ArticleCount field.
func (o *HandlerTemporalcombinedCashbagcloseRequest) SetArticleCount(v int32) {
	o.ArticleCount = &v
}

// GetArticleDetail returns the ArticleDetail field value if set, zero value otherwise.
func (o *HandlerTemporalcombinedCashbagcloseRequest) GetArticleDetail() []HandlerArticleDetail {
	if o == nil || IsNil(o.ArticleDetail) {
		var ret []HandlerArticleDetail
		return ret
	}
	return o.ArticleDetail
}

// GetArticleDetailOk returns a tuple with the ArticleDetail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlerTemporalcombinedCashbagcloseRequest) GetArticleDetailOk() ([]HandlerArticleDetail, bool) {
	if o == nil || IsNil(o.ArticleDetail) {
		return nil, false
	}
	return o.ArticleDetail, true
}

// HasArticleDetail returns a boolean if a field has been set.
func (o *HandlerTemporalcombinedCashbagcloseRequest) HasArticleDetail() bool {
	if o != nil && !IsNil(o.ArticleDetail) {
		return true
	}

	return false
}

// SetArticleDetail gets a reference to the given []HandlerArticleDetail and assigns it to the ArticleDetail field.
func (o *HandlerTemporalcombinedCashbagcloseRequest) SetArticleDetail(v []HandlerArticleDetail) {
	o.ArticleDetail = v
}

// GetArticleWeight returns the ArticleWeight field value if set, zero value otherwise.
func (o *HandlerTemporalcombinedCashbagcloseRequest) GetArticleWeight() float32 {
	if o == nil || IsNil(o.ArticleWeight) {
		var ret float32
		return ret
	}
	return *o.ArticleWeight
}

// GetArticleWeightOk returns a tuple with the ArticleWeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlerTemporalcombinedCashbagcloseRequest) GetArticleWeightOk() (*float32, bool) {
	if o == nil || IsNil(o.ArticleWeight) {
		return nil, false
	}
	return o.ArticleWeight, true
}

// HasArticleWeight returns a boolean if a field has been set.
func (o *HandlerTemporalcombinedCashbagcloseRequest) HasArticleWeight() bool {
	if o != nil && !IsNil(o.ArticleWeight) {
		return true
	}

	return false
}

// SetArticleWeight gets a reference to the given float32 and assigns it to the ArticleWeight field.
func (o *HandlerTemporalcombinedCashbagcloseRequest) SetArticleWeight(v float32) {
	o.ArticleWeight = &v
}

// GetBagCount returns the BagCount field value if set, zero value otherwise.
func (o *HandlerTemporalcombinedCashbagcloseRequest) GetBagCount() int32 {
	if o == nil || IsNil(o.BagCount) {
		var ret int32
		return ret
	}
	return *o.BagCount
}

// GetBagCountOk returns a tuple with the BagCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlerTemporalcombinedCashbagcloseRequest) GetBagCountOk() (*int32, bool) {
	if o == nil || IsNil(o.BagCount) {
		return nil, false
	}
	return o.BagCount, true
}

// HasBagCount returns a boolean if a field has been set.
func (o *HandlerTemporalcombinedCashbagcloseRequest) HasBagCount() bool {
	if o != nil && !IsNil(o.BagCount) {
		return true
	}

	return false
}

// SetBagCount gets a reference to the given int32 and assigns it to the BagCount field.
func (o *HandlerTemporalcombinedCashbagcloseRequest) SetBagCount(v int32) {
	o.BagCount = &v
}

// GetBagNumber returns the BagNumber field value if set, zero value otherwise.
func (o *HandlerTemporalcombinedCashbagcloseRequest) GetBagNumber() string {
	if o == nil || IsNil(o.BagNumber) {
		var ret string
		return ret
	}
	return *o.BagNumber
}

// GetBagNumberOk returns a tuple with the BagNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlerTemporalcombinedCashbagcloseRequest) GetBagNumberOk() (*string, bool) {
	if o == nil || IsNil(o.BagNumber) {
		return nil, false
	}
	return o.BagNumber, true
}

// HasBagNumber returns a boolean if a field has been set.
func (o *HandlerTemporalcombinedCashbagcloseRequest) HasBagNumber() bool {
	if o != nil && !IsNil(o.BagNumber) {
		return true
	}

	return false
}

// SetBagNumber gets a reference to the given string and assigns it to the BagNumber field.
func (o *HandlerTemporalcombinedCashbagcloseRequest) SetBagNumber(v string) {
	o.BagNumber = &v
}

// GetBagType returns the BagType field value if set, zero value otherwise.
func (o *HandlerTemporalcombinedCashbagcloseRequest) GetBagType() string {
	if o == nil || IsNil(o.BagType) {
		var ret string
		return ret
	}
	return *o.BagType
}

// GetBagTypeOk returns a tuple with the BagType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlerTemporalcombinedCashbagcloseRequest) GetBagTypeOk() (*string, bool) {
	if o == nil || IsNil(o.BagType) {
		return nil, false
	}
	return o.BagType, true
}

// HasBagType returns a boolean if a field has been set.
func (o *HandlerTemporalcombinedCashbagcloseRequest) HasBagType() bool {
	if o != nil && !IsNil(o.BagType) {
		return true
	}

	return false
}

// SetBagType gets a reference to the given string and assigns it to the BagType field.
func (o *HandlerTemporalcombinedCashbagcloseRequest) SetBagType(v string) {
	o.BagType = &v
}

// GetBagWeight returns the BagWeight field value if set, zero value otherwise.
func (o *HandlerTemporalcombinedCashbagcloseRequest) GetBagWeight() float32 {
	if o == nil || IsNil(o.BagWeight) {
		var ret float32
		return ret
	}
	return *o.BagWeight
}

// GetBagWeightOk returns a tuple with the BagWeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlerTemporalcombinedCashbagcloseRequest) GetBagWeightOk() (*float32, bool) {
	if o == nil || IsNil(o.BagWeight) {
		return nil, false
	}
	return o.BagWeight, true
}

// HasBagWeight returns a boolean if a field has been set.
func (o *HandlerTemporalcombinedCashbagcloseRequest) HasBagWeight() bool {
	if o != nil && !IsNil(o.BagWeight) {
		return true
	}

	return false
}

// SetBagWeight gets a reference to the given float32 and assigns it to the BagWeight field.
func (o *HandlerTemporalcombinedCashbagcloseRequest) SetBagWeight(v float32) {
	o.BagWeight = &v
}

// GetBoBagContent returns the BoBagContent field value if set, zero value otherwise.
func (o *HandlerTemporalcombinedCashbagcloseRequest) GetBoBagContent() []HandlerBoBagContent {
	if o == nil || IsNil(o.BoBagContent) {
		var ret []HandlerBoBagContent
		return ret
	}
	return o.BoBagContent
}

// GetBoBagContentOk returns a tuple with the BoBagContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlerTemporalcombinedCashbagcloseRequest) GetBoBagContentOk() ([]HandlerBoBagContent, bool) {
	if o == nil || IsNil(o.BoBagContent) {
		return nil, false
	}
	return o.BoBagContent, true
}

// HasBoBagContent returns a boolean if a field has been set.
func (o *HandlerTemporalcombinedCashbagcloseRequest) HasBoBagContent() bool {
	if o != nil && !IsNil(o.BoBagContent) {
		return true
	}

	return false
}

// SetBoBagContent gets a reference to the given []HandlerBoBagContent and assigns it to the BoBagContent field.
func (o *HandlerTemporalcombinedCashbagcloseRequest) SetBoBagContent(v []HandlerBoBagContent) {
	o.BoBagContent = v
}

// GetCashBagWeight returns the CashBagWeight field value if set, zero value otherwise.
func (o *HandlerTemporalcombinedCashbagcloseRequest) GetCashBagWeight() float32 {
	if o == nil || IsNil(o.CashBagWeight) {
		var ret float32
		return ret
	}
	return *o.CashBagWeight
}

// GetCashBagWeightOk returns a tuple with the CashBagWeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlerTemporalcombinedCashbagcloseRequest) GetCashBagWeightOk() (*float32, bool) {
	if o == nil || IsNil(o.CashBagWeight) {
		return nil, false
	}
	return o.CashBagWeight, true
}

// HasCashBagWeight returns a boolean if a field has been set.
func (o *HandlerTemporalcombinedCashbagcloseRequest) HasCashBagWeight() bool {
	if o != nil && !IsNil(o.CashBagWeight) {
		return true
	}

	return false
}

// SetCashBagWeight gets a reference to the given float32 and assigns it to the CashBagWeight field.
func (o *HandlerTemporalcombinedCashbagcloseRequest) SetCashBagWeight(v float32) {
	o.CashBagWeight = &v
}

// GetCashDenomination returns the CashDenomination field value if set, zero value otherwise.
func (o *HandlerTemporalcombinedCashbagcloseRequest) GetCashDenomination() []HandlerCashDenomination {
	if o == nil || IsNil(o.CashDenomination) {
		var ret []HandlerCashDenomination
		return ret
	}
	return o.CashDenomination
}

// GetCashDenominationOk returns a tuple with the CashDenomination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlerTemporalcombinedCashbagcloseRequest) GetCashDenominationOk() ([]HandlerCashDenomination, bool) {
	if o == nil || IsNil(o.CashDenomination) {
		return nil, false
	}
	return o.CashDenomination, true
}

// HasCashDenomination returns a boolean if a field has been set.
func (o *HandlerTemporalcombinedCashbagcloseRequest) HasCashDenomination() bool {
	if o != nil && !IsNil(o.CashDenomination) {
		return true
	}

	return false
}

// SetCashDenomination gets a reference to the given []HandlerCashDenomination and assigns it to the CashDenomination field.
func (o *HandlerTemporalcombinedCashbagcloseRequest) SetCashDenomination(v []HandlerCashDenomination) {
	o.CashDenomination = v
}

// GetCashTotalAmount returns the CashTotalAmount field value if set, zero value otherwise.
func (o *HandlerTemporalcombinedCashbagcloseRequest) GetCashTotalAmount() float32 {
	if o == nil || IsNil(o.CashTotalAmount) {
		var ret float32
		return ret
	}
	return *o.CashTotalAmount
}

// GetCashTotalAmountOk returns a tuple with the CashTotalAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlerTemporalcombinedCashbagcloseRequest) GetCashTotalAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.CashTotalAmount) {
		return nil, false
	}
	return o.CashTotalAmount, true
}

// HasCashTotalAmount returns a boolean if a field has been set.
func (o *HandlerTemporalcombinedCashbagcloseRequest) HasCashTotalAmount() bool {
	if o != nil && !IsNil(o.CashTotalAmount) {
		return true
	}

	return false
}

// SetCashTotalAmount gets a reference to the given float32 and assigns it to the CashTotalAmount field.
func (o *HandlerTemporalcombinedCashbagcloseRequest) SetCashTotalAmount(v float32) {
	o.CashTotalAmount = &v
}

// GetCashbagId returns the CashbagId field value if set, zero value otherwise.
func (o *HandlerTemporalcombinedCashbagcloseRequest) GetCashbagId() string {
	if o == nil || IsNil(o.CashbagId) {
		var ret string
		return ret
	}
	return *o.CashbagId
}

// GetCashbagIdOk returns a tuple with the CashbagId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlerTemporalcombinedCashbagcloseRequest) GetCashbagIdOk() (*string, bool) {
	if o == nil || IsNil(o.CashbagId) {
		return nil, false
	}
	return o.CashbagId, true
}

// HasCashbagId returns a boolean if a field has been set.
func (o *HandlerTemporalcombinedCashbagcloseRequest) HasCashbagId() bool {
	if o != nil && !IsNil(o.CashbagId) {
		return true
	}

	return false
}

// SetCashbagId gets a reference to the given string and assigns it to the CashbagId field.
func (o *HandlerTemporalcombinedCashbagcloseRequest) SetCashbagId(v string) {
	o.CashbagId = &v
}

// GetChequeDetails returns the ChequeDetails field value if set, zero value otherwise.
func (o *HandlerTemporalcombinedCashbagcloseRequest) GetChequeDetails() []HandlerChequeDetail {
	if o == nil || IsNil(o.ChequeDetails) {
		var ret []HandlerChequeDetail
		return ret
	}
	return o.ChequeDetails
}

// GetChequeDetailsOk returns a tuple with the ChequeDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlerTemporalcombinedCashbagcloseRequest) GetChequeDetailsOk() ([]HandlerChequeDetail, bool) {
	if o == nil || IsNil(o.ChequeDetails) {
		return nil, false
	}
	return o.ChequeDetails, true
}

// HasChequeDetails returns a boolean if a field has been set.
func (o *HandlerTemporalcombinedCashbagcloseRequest) HasChequeDetails() bool {
	if o != nil && !IsNil(o.ChequeDetails) {
		return true
	}

	return false
}

// SetChequeDetails gets a reference to the given []HandlerChequeDetail and assigns it to the ChequeDetails field.
func (o *HandlerTemporalcombinedCashbagcloseRequest) SetChequeDetails(v []HandlerChequeDetail) {
	o.ChequeDetails = v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *HandlerTemporalcombinedCashbagcloseRequest) GetCreatedBy() string {
	if o == nil || IsNil(o.CreatedBy) {
		var ret string
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlerTemporalcombinedCashbagcloseRequest) GetCreatedByOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *HandlerTemporalcombinedCashbagcloseRequest) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given string and assigns it to the CreatedBy field.
func (o *HandlerTemporalcombinedCashbagcloseRequest) SetCreatedBy(v string) {
	o.CreatedBy = &v
}

// GetCreatedDate returns the CreatedDate field value if set, zero value otherwise.
func (o *HandlerTemporalcombinedCashbagcloseRequest) GetCreatedDate() string {
	if o == nil || IsNil(o.CreatedDate) {
		var ret string
		return ret
	}
	return *o.CreatedDate
}

// GetCreatedDateOk returns a tuple with the CreatedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlerTemporalcombinedCashbagcloseRequest) GetCreatedDateOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedDate) {
		return nil, false
	}
	return o.CreatedDate, true
}

// HasCreatedDate returns a boolean if a field has been set.
func (o *HandlerTemporalcombinedCashbagcloseRequest) HasCreatedDate() bool {
	if o != nil && !IsNil(o.CreatedDate) {
		return true
	}

	return false
}

// SetCreatedDate gets a reference to the given string and assigns it to the CreatedDate field.
func (o *HandlerTemporalcombinedCashbagcloseRequest) SetCreatedDate(v string) {
	o.CreatedDate = &v
}

// GetDeliveryType returns the DeliveryType field value if set, zero value otherwise.
func (o *HandlerTemporalcombinedCashbagcloseRequest) GetDeliveryType() string {
	if o == nil || IsNil(o.DeliveryType) {
		var ret string
		return ret
	}
	return *o.DeliveryType
}

// GetDeliveryTypeOk returns a tuple with the DeliveryType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlerTemporalcombinedCashbagcloseRequest) GetDeliveryTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DeliveryType) {
		return nil, false
	}
	return o.DeliveryType, true
}

// HasDeliveryType returns a boolean if a field has been set.
func (o *HandlerTemporalcombinedCashbagcloseRequest) HasDeliveryType() bool {
	if o != nil && !IsNil(o.DeliveryType) {
		return true
	}

	return false
}

// SetDeliveryType gets a reference to the given string and assigns it to the DeliveryType field.
func (o *HandlerTemporalcombinedCashbagcloseRequest) SetDeliveryType(v string) {
	o.DeliveryType = &v
}

// GetDocumentList returns the DocumentList field value if set, zero value otherwise.
func (o *HandlerTemporalcombinedCashbagcloseRequest) GetDocumentList() string {
	if o == nil || IsNil(o.DocumentList) {
		var ret string
		return ret
	}
	return *o.DocumentList
}

// GetDocumentListOk returns a tuple with the DocumentList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlerTemporalcombinedCashbagcloseRequest) GetDocumentListOk() (*string, bool) {
	if o == nil || IsNil(o.DocumentList) {
		return nil, false
	}
	return o.DocumentList, true
}

// HasDocumentList returns a boolean if a field has been set.
func (o *HandlerTemporalcombinedCashbagcloseRequest) HasDocumentList() bool {
	if o != nil && !IsNil(o.DocumentList) {
		return true
	}

	return false
}

// SetDocumentList gets a reference to the given string and assigns it to the DocumentList field.
func (o *HandlerTemporalcombinedCashbagcloseRequest) SetDocumentList(v string) {
	o.DocumentList = &v
}

// GetEmoList returns the EmoList field value if set, zero value otherwise.
func (o *HandlerTemporalcombinedCashbagcloseRequest) GetEmoList() []HandlerEmoDetail {
	if o == nil || IsNil(o.EmoList) {
		var ret []HandlerEmoDetail
		return ret
	}
	return o.EmoList
}

// GetEmoListOk returns a tuple with the EmoList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlerTemporalcombinedCashbagcloseRequest) GetEmoListOk() ([]HandlerEmoDetail, bool) {
	if o == nil || IsNil(o.EmoList) {
		return nil, false
	}
	return o.EmoList, true
}

// HasEmoList returns a boolean if a field has been set.
func (o *HandlerTemporalcombinedCashbagcloseRequest) HasEmoList() bool {
	if o != nil && !IsNil(o.EmoList) {
		return true
	}

	return false
}

// SetEmoList gets a reference to the given []HandlerEmoDetail and assigns it to the EmoList field.
func (o *HandlerTemporalcombinedCashbagcloseRequest) SetEmoList(v []HandlerEmoDetail) {
	o.EmoList = v
}

// GetEmoTotalAmount returns the EmoTotalAmount field value if set, zero value otherwise.
func (o *HandlerTemporalcombinedCashbagcloseRequest) GetEmoTotalAmount() float32 {
	if o == nil || IsNil(o.EmoTotalAmount) {
		var ret float32
		return ret
	}
	return *o.EmoTotalAmount
}

// GetEmoTotalAmountOk returns a tuple with the EmoTotalAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlerTemporalcombinedCashbagcloseRequest) GetEmoTotalAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.EmoTotalAmount) {
		return nil, false
	}
	return o.EmoTotalAmount, true
}

// HasEmoTotalAmount returns a boolean if a field has been set.
func (o *HandlerTemporalcombinedCashbagcloseRequest) HasEmoTotalAmount() bool {
	if o != nil && !IsNil(o.EmoTotalAmount) {
		return true
	}

	return false
}

// SetEmoTotalAmount gets a reference to the given float32 and assigns it to the EmoTotalAmount field.
func (o *HandlerTemporalcombinedCashbagcloseRequest) SetEmoTotalAmount(v float32) {
	o.EmoTotalAmount = &v
}

// GetEventType returns the EventType field value if set, zero value otherwise.
func (o *HandlerTemporalcombinedCashbagcloseRequest) GetEventType() string {
	if o == nil || IsNil(o.EventType) {
		var ret string
		return ret
	}
	return *o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlerTemporalcombinedCashbagcloseRequest) GetEventTypeOk() (*string, bool) {
	if o == nil || IsNil(o.EventType) {
		return nil, false
	}
	return o.EventType, true
}

// HasEventType returns a boolean if a field has been set.
func (o *HandlerTemporalcombinedCashbagcloseRequest) HasEventType() bool {
	if o != nil && !IsNil(o.EventType) {
		return true
	}

	return false
}

// SetEventType gets a reference to the given string and assigns it to the EventType field.
func (o *HandlerTemporalcombinedCashbagcloseRequest) SetEventType(v string) {
	o.EventType = &v
}

// GetFromOfficeId returns the FromOfficeId field value if set, zero value otherwise.
func (o *HandlerTemporalcombinedCashbagcloseRequest) GetFromOfficeId() int32 {
	if o == nil || IsNil(o.FromOfficeId) {
		var ret int32
		return ret
	}
	return *o.FromOfficeId
}

// GetFromOfficeIdOk returns a tuple with the FromOfficeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlerTemporalcombinedCashbagcloseRequest) GetFromOfficeIdOk() (*int32, bool) {
	if o == nil || IsNil(o.FromOfficeId) {
		return nil, false
	}
	return o.FromOfficeId, true
}

// HasFromOfficeId returns a boolean if a field has been set.
func (o *HandlerTemporalcombinedCashbagcloseRequest) HasFromOfficeId() bool {
	if o != nil && !IsNil(o.FromOfficeId) {
		return true
	}

	return false
}

// SetFromOfficeId gets a reference to the given int32 and assigns it to the FromOfficeId field.
func (o *HandlerTemporalcombinedCashbagcloseRequest) SetFromOfficeId(v int32) {
	o.FromOfficeId = &v
}

// GetInsuredFlag returns the InsuredFlag field value if set, zero value otherwise.
func (o *HandlerTemporalcombinedCashbagcloseRequest) GetInsuredFlag() bool {
	if o == nil || IsNil(o.InsuredFlag) {
		var ret bool
		return ret
	}
	return *o.InsuredFlag
}

// GetInsuredFlagOk returns a tuple with the InsuredFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlerTemporalcombinedCashbagcloseRequest) GetInsuredFlagOk() (*bool, bool) {
	if o == nil || IsNil(o.InsuredFlag) {
		return nil, false
	}
	return o.InsuredFlag, true
}

// HasInsuredFlag returns a boolean if a field has been set.
func (o *HandlerTemporalcombinedCashbagcloseRequest) HasInsuredFlag() bool {
	if o != nil && !IsNil(o.InsuredFlag) {
		return true
	}

	return false
}

// SetInsuredFlag gets a reference to the given bool and assigns it to the InsuredFlag field.
func (o *HandlerTemporalcombinedCashbagcloseRequest) SetInsuredFlag(v bool) {
	o.InsuredFlag = &v
}

// GetIpoDetail returns the IpoDetail field value if set, zero value otherwise.
func (o *HandlerTemporalcombinedCashbagcloseRequest) GetIpoDetail() []HandlerIPODetail {
	if o == nil || IsNil(o.IpoDetail) {
		var ret []HandlerIPODetail
		return ret
	}
	return o.IpoDetail
}

// GetIpoDetailOk returns a tuple with the IpoDetail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlerTemporalcombinedCashbagcloseRequest) GetIpoDetailOk() ([]HandlerIPODetail, bool) {
	if o == nil || IsNil(o.IpoDetail) {
		return nil, false
	}
	return o.IpoDetail, true
}

// HasIpoDetail returns a boolean if a field has been set.
func (o *HandlerTemporalcombinedCashbagcloseRequest) HasIpoDetail() bool {
	if o != nil && !IsNil(o.IpoDetail) {
		return true
	}

	return false
}

// SetIpoDetail gets a reference to the given []HandlerIPODetail and assigns it to the IpoDetail field.
func (o *HandlerTemporalcombinedCashbagcloseRequest) SetIpoDetail(v []HandlerIPODetail) {
	o.IpoDetail = v
}

// GetReceiverOfficeId returns the ReceiverOfficeId field value if set, zero value otherwise.
func (o *HandlerTemporalcombinedCashbagcloseRequest) GetReceiverOfficeId() int32 {
	if o == nil || IsNil(o.ReceiverOfficeId) {
		var ret int32
		return ret
	}
	return *o.ReceiverOfficeId
}

// GetReceiverOfficeIdOk returns a tuple with the ReceiverOfficeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlerTemporalcombinedCashbagcloseRequest) GetReceiverOfficeIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ReceiverOfficeId) {
		return nil, false
	}
	return o.ReceiverOfficeId, true
}

// HasReceiverOfficeId returns a boolean if a field has been set.
func (o *HandlerTemporalcombinedCashbagcloseRequest) HasReceiverOfficeId() bool {
	if o != nil && !IsNil(o.ReceiverOfficeId) {
		return true
	}

	return false
}

// SetReceiverOfficeId gets a reference to the given int32 and assigns it to the ReceiverOfficeId field.
func (o *HandlerTemporalcombinedCashbagcloseRequest) SetReceiverOfficeId(v int32) {
	o.ReceiverOfficeId = &v
}

// GetRemark returns the Remark field value if set, zero value otherwise.
func (o *HandlerTemporalcombinedCashbagcloseRequest) GetRemark() string {
	if o == nil || IsNil(o.Remark) {
		var ret string
		return ret
	}
	return *o.Remark
}

// GetRemarkOk returns a tuple with the Remark field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlerTemporalcombinedCashbagcloseRequest) GetRemarkOk() (*string, bool) {
	if o == nil || IsNil(o.Remark) {
		return nil, false
	}
	return o.Remark, true
}

// HasRemark returns a boolean if a field has been set.
func (o *HandlerTemporalcombinedCashbagcloseRequest) HasRemark() bool {
	if o != nil && !IsNil(o.Remark) {
		return true
	}

	return false
}

// SetRemark gets a reference to the given string and assigns it to the Remark field.
func (o *HandlerTemporalcombinedCashbagcloseRequest) SetRemark(v string) {
	o.Remark = &v
}

// GetSenderOfficeId returns the SenderOfficeId field value if set, zero value otherwise.
func (o *HandlerTemporalcombinedCashbagcloseRequest) GetSenderOfficeId() int32 {
	if o == nil || IsNil(o.SenderOfficeId) {
		var ret int32
		return ret
	}
	return *o.SenderOfficeId
}

// GetSenderOfficeIdOk returns a tuple with the SenderOfficeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlerTemporalcombinedCashbagcloseRequest) GetSenderOfficeIdOk() (*int32, bool) {
	if o == nil || IsNil(o.SenderOfficeId) {
		return nil, false
	}
	return o.SenderOfficeId, true
}

// HasSenderOfficeId returns a boolean if a field has been set.
func (o *HandlerTemporalcombinedCashbagcloseRequest) HasSenderOfficeId() bool {
	if o != nil && !IsNil(o.SenderOfficeId) {
		return true
	}

	return false
}

// SetSenderOfficeId gets a reference to the given int32 and assigns it to the SenderOfficeId field.
func (o *HandlerTemporalcombinedCashbagcloseRequest) SetSenderOfficeId(v int32) {
	o.SenderOfficeId = &v
}

// GetSetDate returns the SetDate field value if set, zero value otherwise.
func (o *HandlerTemporalcombinedCashbagcloseRequest) GetSetDate() string {
	if o == nil || IsNil(o.SetDate) {
		var ret string
		return ret
	}
	return *o.SetDate
}

// GetSetDateOk returns a tuple with the SetDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlerTemporalcombinedCashbagcloseRequest) GetSetDateOk() (*string, bool) {
	if o == nil || IsNil(o.SetDate) {
		return nil, false
	}
	return o.SetDate, true
}

// HasSetDate returns a boolean if a field has been set.
func (o *HandlerTemporalcombinedCashbagcloseRequest) HasSetDate() bool {
	if o != nil && !IsNil(o.SetDate) {
		return true
	}

	return false
}

// SetSetDate gets a reference to the given string and assigns it to the SetDate field.
func (o *HandlerTemporalcombinedCashbagcloseRequest) SetSetDate(v string) {
	o.SetDate = &v
}

// GetSetNumber returns the SetNumber field value if set, zero value otherwise.
func (o *HandlerTemporalcombinedCashbagcloseRequest) GetSetNumber() string {
	if o == nil || IsNil(o.SetNumber) {
		var ret string
		return ret
	}
	return *o.SetNumber
}

// GetSetNumberOk returns a tuple with the SetNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlerTemporalcombinedCashbagcloseRequest) GetSetNumberOk() (*string, bool) {
	if o == nil || IsNil(o.SetNumber) {
		return nil, false
	}
	return o.SetNumber, true
}

// HasSetNumber returns a boolean if a field has been set.
func (o *HandlerTemporalcombinedCashbagcloseRequest) HasSetNumber() bool {
	if o != nil && !IsNil(o.SetNumber) {
		return true
	}

	return false
}

// SetSetNumber gets a reference to the given string and assigns it to the SetNumber field.
func (o *HandlerTemporalcombinedCashbagcloseRequest) SetSetNumber(v string) {
	o.SetNumber = &v
}

// GetStampDetail returns the StampDetail field value if set, zero value otherwise.
func (o *HandlerTemporalcombinedCashbagcloseRequest) GetStampDetail() []HandlerStampDetail {
	if o == nil || IsNil(o.StampDetail) {
		var ret []HandlerStampDetail
		return ret
	}
	return o.StampDetail
}

// GetStampDetailOk returns a tuple with the StampDetail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlerTemporalcombinedCashbagcloseRequest) GetStampDetailOk() ([]HandlerStampDetail, bool) {
	if o == nil || IsNil(o.StampDetail) {
		return nil, false
	}
	return o.StampDetail, true
}

// HasStampDetail returns a boolean if a field has been set.
func (o *HandlerTemporalcombinedCashbagcloseRequest) HasStampDetail() bool {
	if o != nil && !IsNil(o.StampDetail) {
		return true
	}

	return false
}

// SetStampDetail gets a reference to the given []HandlerStampDetail and assigns it to the StampDetail field.
func (o *HandlerTemporalcombinedCashbagcloseRequest) SetStampDetail(v []HandlerStampDetail) {
	o.StampDetail = v
}

// GetStationeryDetail returns the StationeryDetail field value if set, zero value otherwise.
func (o *HandlerTemporalcombinedCashbagcloseRequest) GetStationeryDetail() []HandlerStationeryDetail {
	if o == nil || IsNil(o.StationeryDetail) {
		var ret []HandlerStationeryDetail
		return ret
	}
	return o.StationeryDetail
}

// GetStationeryDetailOk returns a tuple with the StationeryDetail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlerTemporalcombinedCashbagcloseRequest) GetStationeryDetailOk() ([]HandlerStationeryDetail, bool) {
	if o == nil || IsNil(o.StationeryDetail) {
		return nil, false
	}
	return o.StationeryDetail, true
}

// HasStationeryDetail returns a boolean if a field has been set.
func (o *HandlerTemporalcombinedCashbagcloseRequest) HasStationeryDetail() bool {
	if o != nil && !IsNil(o.StationeryDetail) {
		return true
	}

	return false
}

// SetStationeryDetail gets a reference to the given []HandlerStationeryDetail and assigns it to the StationeryDetail field.
func (o *HandlerTemporalcombinedCashbagcloseRequest) SetStationeryDetail(v []HandlerStationeryDetail) {
	o.StationeryDetail = v
}

// GetToOfficeId returns the ToOfficeId field value if set, zero value otherwise.
func (o *HandlerTemporalcombinedCashbagcloseRequest) GetToOfficeId() int32 {
	if o == nil || IsNil(o.ToOfficeId) {
		var ret int32
		return ret
	}
	return *o.ToOfficeId
}

// GetToOfficeIdOk returns a tuple with the ToOfficeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlerTemporalcombinedCashbagcloseRequest) GetToOfficeIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ToOfficeId) {
		return nil, false
	}
	return o.ToOfficeId, true
}

// HasToOfficeId returns a boolean if a field has been set.
func (o *HandlerTemporalcombinedCashbagcloseRequest) HasToOfficeId() bool {
	if o != nil && !IsNil(o.ToOfficeId) {
		return true
	}

	return false
}

// SetToOfficeId gets a reference to the given int32 and assigns it to the ToOfficeId field.
func (o *HandlerTemporalcombinedCashbagcloseRequest) SetToOfficeId(v int32) {
	o.ToOfficeId = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *HandlerTemporalcombinedCashbagcloseRequest) GetUserId() int32 {
	if o == nil || IsNil(o.UserId) {
		var ret int32
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlerTemporalcombinedCashbagcloseRequest) GetUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *HandlerTemporalcombinedCashbagcloseRequest) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given int32 and assigns it to the UserId field.
func (o *HandlerTemporalcombinedCashbagcloseRequest) SetUserId(v int32) {
	o.UserId = &v
}

func (o HandlerTemporalcombinedCashbagcloseRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HandlerTemporalcombinedCashbagcloseRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AcBagId) {
		toSerialize["ac_bag_id"] = o.AcBagId
	}
	if !IsNil(o.AcBagWeight) {
		toSerialize["ac_bag_weight"] = o.AcBagWeight
	}
	if !IsNil(o.ArticleCount) {
		toSerialize["article_count"] = o.ArticleCount
	}
	if !IsNil(o.ArticleDetail) {
		toSerialize["article_detail"] = o.ArticleDetail
	}
	if !IsNil(o.ArticleWeight) {
		toSerialize["article_weight"] = o.ArticleWeight
	}
	if !IsNil(o.BagCount) {
		toSerialize["bag_count"] = o.BagCount
	}
	if !IsNil(o.BagNumber) {
		toSerialize["bag_number"] = o.BagNumber
	}
	if !IsNil(o.BagType) {
		toSerialize["bag_type"] = o.BagType
	}
	if !IsNil(o.BagWeight) {
		toSerialize["bag_weight"] = o.BagWeight
	}
	if !IsNil(o.BoBagContent) {
		toSerialize["bo_bag_content"] = o.BoBagContent
	}
	if !IsNil(o.CashBagWeight) {
		toSerialize["cash_bag_weight"] = o.CashBagWeight
	}
	if !IsNil(o.CashDenomination) {
		toSerialize["cash_denomination"] = o.CashDenomination
	}
	if !IsNil(o.CashTotalAmount) {
		toSerialize["cash_total_amount"] = o.CashTotalAmount
	}
	if !IsNil(o.CashbagId) {
		toSerialize["cashbag_id"] = o.CashbagId
	}
	if !IsNil(o.ChequeDetails) {
		toSerialize["cheque_details"] = o.ChequeDetails
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["created_by"] = o.CreatedBy
	}
	if !IsNil(o.CreatedDate) {
		toSerialize["created_date"] = o.CreatedDate
	}
	if !IsNil(o.DeliveryType) {
		toSerialize["delivery_type"] = o.DeliveryType
	}
	if !IsNil(o.DocumentList) {
		toSerialize["document_list"] = o.DocumentList
	}
	if !IsNil(o.EmoList) {
		toSerialize["emo_list"] = o.EmoList
	}
	if !IsNil(o.EmoTotalAmount) {
		toSerialize["emo_total_amount"] = o.EmoTotalAmount
	}
	if !IsNil(o.EventType) {
		toSerialize["event_type"] = o.EventType
	}
	if !IsNil(o.FromOfficeId) {
		toSerialize["from_office_id"] = o.FromOfficeId
	}
	if !IsNil(o.InsuredFlag) {
		toSerialize["insured_flag"] = o.InsuredFlag
	}
	if !IsNil(o.IpoDetail) {
		toSerialize["ipo_detail"] = o.IpoDetail
	}
	if !IsNil(o.ReceiverOfficeId) {
		toSerialize["receiver_office_id"] = o.ReceiverOfficeId
	}
	if !IsNil(o.Remark) {
		toSerialize["remark"] = o.Remark
	}
	if !IsNil(o.SenderOfficeId) {
		toSerialize["sender_office_id"] = o.SenderOfficeId
	}
	if !IsNil(o.SetDate) {
		toSerialize["set_date"] = o.SetDate
	}
	if !IsNil(o.SetNumber) {
		toSerialize["set_number"] = o.SetNumber
	}
	if !IsNil(o.StampDetail) {
		toSerialize["stamp_detail"] = o.StampDetail
	}
	if !IsNil(o.StationeryDetail) {
		toSerialize["stationery_detail"] = o.StationeryDetail
	}
	if !IsNil(o.ToOfficeId) {
		toSerialize["to_office_id"] = o.ToOfficeId
	}
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}
	return toSerialize, nil
}

type NullableHandlerTemporalcombinedCashbagcloseRequest struct {
	value *HandlerTemporalcombinedCashbagcloseRequest
	isSet bool
}

func (v NullableHandlerTemporalcombinedCashbagcloseRequest) Get() *HandlerTemporalcombinedCashbagcloseRequest {
	return v.value
}

func (v *NullableHandlerTemporalcombinedCashbagcloseRequest) Set(val *HandlerTemporalcombinedCashbagcloseRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableHandlerTemporalcombinedCashbagcloseRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableHandlerTemporalcombinedCashbagcloseRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHandlerTemporalcombinedCashbagcloseRequest(val *HandlerTemporalcombinedCashbagcloseRequest) *NullableHandlerTemporalcombinedCashbagcloseRequest {
	return &NullableHandlerTemporalcombinedCashbagcloseRequest{value: val, isSet: true}
}

func (v NullableHandlerTemporalcombinedCashbagcloseRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHandlerTemporalcombinedCashbagcloseRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


