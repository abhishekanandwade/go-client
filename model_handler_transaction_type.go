/*
Treasury Management API

A comprehensive API for managing addresses, offering endpoints for creation, update, deletion, and retrieval of address data.

API version: 1.0
Contact: support_cept@indiapost.gov.in
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// HandlerTransactionType the model 'HandlerTransactionType'
type HandlerTransactionType string

// List of handler.transactionType
const (
	approvePdgSource HandlerTransactionType = "approve-pdg-source"
	processOrAcknowledge HandlerTransactionType = "process-or-acknowledge"
	processPdgAcknowledge HandlerTransactionType = "process-pdg-ack"
	approvePdgIssue HandlerTransactionType = "approve-pdg-issue"
	processPdgIssue HandlerTransactionType = "process-pdg-issue"
)

// All allowed values of HandlerTransactionType enum
var AllowedHandlerTransactionTypeEnumValues = []HandlerTransactionType{
	"approve-pdg-source",
	"process-or-acknowledge",
	"process-pdg-ack",
	"approve-pdg-issue",
	"process-pdg-issue",
}

func (v *HandlerTransactionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := HandlerTransactionType(value)
	for _, existing := range AllowedHandlerTransactionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid HandlerTransactionType", value)
}

// NewHandlerTransactionTypeFromValue returns a pointer to a valid HandlerTransactionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHandlerTransactionTypeFromValue(v string) (*HandlerTransactionType, error) {
	ev := HandlerTransactionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for HandlerTransactionType: valid values are %v", v, AllowedHandlerTransactionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HandlerTransactionType) IsValid() bool {
	for _, existing := range AllowedHandlerTransactionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to handler.transactionType value
func (v HandlerTransactionType) Ptr() *HandlerTransactionType {
	return &v
}

type NullableHandlerTransactionType struct {
	value *HandlerTransactionType
	isSet bool
}

func (v NullableHandlerTransactionType) Get() *HandlerTransactionType {
	return v.value
}

func (v *NullableHandlerTransactionType) Set(val *HandlerTransactionType) {
	v.value = val
	v.isSet = true
}

func (v NullableHandlerTransactionType) IsSet() bool {
	return v.isSet
}

func (v *NullableHandlerTransactionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHandlerTransactionType(val *HandlerTransactionType) *NullableHandlerTransactionType {
	return &NullableHandlerTransactionType{value: val, isSet: true}
}

func (v NullableHandlerTransactionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHandlerTransactionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

