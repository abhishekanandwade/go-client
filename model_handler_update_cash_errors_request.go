/*
Treasury Management API

A comprehensive API for managing addresses, offering endpoints for creation, update, deletion, and retrieval of address data.

API version: 1.0
Contact: support_cept@indiapost.gov.in
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HandlerUpdateCashErrorsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HandlerUpdateCashErrorsRequest{}

// HandlerUpdateCashErrorsRequest struct for HandlerUpdateCashErrorsRequest
type HandlerUpdateCashErrorsRequest struct {
	OfficeId int32 `json:"office_id"`
	Remarks string `json:"remarks"`
	Status *string `json:"status,omitempty"`
	UserId int32 `json:"user_id"`
}

type _HandlerUpdateCashErrorsRequest HandlerUpdateCashErrorsRequest

// NewHandlerUpdateCashErrorsRequest instantiates a new HandlerUpdateCashErrorsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHandlerUpdateCashErrorsRequest(officeId int32, remarks string, userId int32) *HandlerUpdateCashErrorsRequest {
	this := HandlerUpdateCashErrorsRequest{}
	this.OfficeId = officeId
	this.Remarks = remarks
	this.UserId = userId
	return &this
}

// NewHandlerUpdateCashErrorsRequestWithDefaults instantiates a new HandlerUpdateCashErrorsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHandlerUpdateCashErrorsRequestWithDefaults() *HandlerUpdateCashErrorsRequest {
	this := HandlerUpdateCashErrorsRequest{}
	return &this
}

// GetOfficeId returns the OfficeId field value
func (o *HandlerUpdateCashErrorsRequest) GetOfficeId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.OfficeId
}

// GetOfficeIdOk returns a tuple with the OfficeId field value
// and a boolean to check if the value has been set.
func (o *HandlerUpdateCashErrorsRequest) GetOfficeIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OfficeId, true
}

// SetOfficeId sets field value
func (o *HandlerUpdateCashErrorsRequest) SetOfficeId(v int32) {
	o.OfficeId = v
}

// GetRemarks returns the Remarks field value
func (o *HandlerUpdateCashErrorsRequest) GetRemarks() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Remarks
}

// GetRemarksOk returns a tuple with the Remarks field value
// and a boolean to check if the value has been set.
func (o *HandlerUpdateCashErrorsRequest) GetRemarksOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Remarks, true
}

// SetRemarks sets field value
func (o *HandlerUpdateCashErrorsRequest) SetRemarks(v string) {
	o.Remarks = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *HandlerUpdateCashErrorsRequest) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlerUpdateCashErrorsRequest) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *HandlerUpdateCashErrorsRequest) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *HandlerUpdateCashErrorsRequest) SetStatus(v string) {
	o.Status = &v
}

// GetUserId returns the UserId field value
func (o *HandlerUpdateCashErrorsRequest) GetUserId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *HandlerUpdateCashErrorsRequest) GetUserIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *HandlerUpdateCashErrorsRequest) SetUserId(v int32) {
	o.UserId = v
}

func (o HandlerUpdateCashErrorsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HandlerUpdateCashErrorsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["office_id"] = o.OfficeId
	toSerialize["remarks"] = o.Remarks
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	toSerialize["user_id"] = o.UserId
	return toSerialize, nil
}

func (o *HandlerUpdateCashErrorsRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"office_id",
		"remarks",
		"user_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHandlerUpdateCashErrorsRequest := _HandlerUpdateCashErrorsRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHandlerUpdateCashErrorsRequest)

	if err != nil {
		return err
	}

	*o = HandlerUpdateCashErrorsRequest(varHandlerUpdateCashErrorsRequest)

	return err
}

type NullableHandlerUpdateCashErrorsRequest struct {
	value *HandlerUpdateCashErrorsRequest
	isSet bool
}

func (v NullableHandlerUpdateCashErrorsRequest) Get() *HandlerUpdateCashErrorsRequest {
	return v.value
}

func (v *NullableHandlerUpdateCashErrorsRequest) Set(val *HandlerUpdateCashErrorsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableHandlerUpdateCashErrorsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableHandlerUpdateCashErrorsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHandlerUpdateCashErrorsRequest(val *HandlerUpdateCashErrorsRequest) *NullableHandlerUpdateCashErrorsRequest {
	return &NullableHandlerUpdateCashErrorsRequest{value: val, isSet: true}
}

func (v NullableHandlerUpdateCashErrorsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHandlerUpdateCashErrorsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


