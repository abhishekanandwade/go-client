/*
Treasury Management API

A comprehensive API for managing addresses, offering endpoints for creation, update, deletion, and retrieval of address data.

API version: 1.0
Contact: support_cept@indiapost.gov.in
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HandlerUpdateMiscTransactionsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HandlerUpdateMiscTransactionsRequest{}

// HandlerUpdateMiscTransactionsRequest struct for HandlerUpdateMiscTransactionsRequest
type HandlerUpdateMiscTransactionsRequest struct {
	ApproverId int32 `json:"approver_id"`
	ApproverRemarks string `json:"approver_remarks"`
	IsApproved *bool `json:"is_approved,omitempty"`
	TransactionID string `json:"transactionID"`
}

type _HandlerUpdateMiscTransactionsRequest HandlerUpdateMiscTransactionsRequest

// NewHandlerUpdateMiscTransactionsRequest instantiates a new HandlerUpdateMiscTransactionsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHandlerUpdateMiscTransactionsRequest(approverId int32, approverRemarks string, transactionID string) *HandlerUpdateMiscTransactionsRequest {
	this := HandlerUpdateMiscTransactionsRequest{}
	this.ApproverId = approverId
	this.ApproverRemarks = approverRemarks
	this.TransactionID = transactionID
	return &this
}

// NewHandlerUpdateMiscTransactionsRequestWithDefaults instantiates a new HandlerUpdateMiscTransactionsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHandlerUpdateMiscTransactionsRequestWithDefaults() *HandlerUpdateMiscTransactionsRequest {
	this := HandlerUpdateMiscTransactionsRequest{}
	return &this
}

// GetApproverId returns the ApproverId field value
func (o *HandlerUpdateMiscTransactionsRequest) GetApproverId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ApproverId
}

// GetApproverIdOk returns a tuple with the ApproverId field value
// and a boolean to check if the value has been set.
func (o *HandlerUpdateMiscTransactionsRequest) GetApproverIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApproverId, true
}

// SetApproverId sets field value
func (o *HandlerUpdateMiscTransactionsRequest) SetApproverId(v int32) {
	o.ApproverId = v
}

// GetApproverRemarks returns the ApproverRemarks field value
func (o *HandlerUpdateMiscTransactionsRequest) GetApproverRemarks() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApproverRemarks
}

// GetApproverRemarksOk returns a tuple with the ApproverRemarks field value
// and a boolean to check if the value has been set.
func (o *HandlerUpdateMiscTransactionsRequest) GetApproverRemarksOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApproverRemarks, true
}

// SetApproverRemarks sets field value
func (o *HandlerUpdateMiscTransactionsRequest) SetApproverRemarks(v string) {
	o.ApproverRemarks = v
}

// GetIsApproved returns the IsApproved field value if set, zero value otherwise.
func (o *HandlerUpdateMiscTransactionsRequest) GetIsApproved() bool {
	if o == nil || IsNil(o.IsApproved) {
		var ret bool
		return ret
	}
	return *o.IsApproved
}

// GetIsApprovedOk returns a tuple with the IsApproved field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlerUpdateMiscTransactionsRequest) GetIsApprovedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsApproved) {
		return nil, false
	}
	return o.IsApproved, true
}

// HasIsApproved returns a boolean if a field has been set.
func (o *HandlerUpdateMiscTransactionsRequest) HasIsApproved() bool {
	if o != nil && !IsNil(o.IsApproved) {
		return true
	}

	return false
}

// SetIsApproved gets a reference to the given bool and assigns it to the IsApproved field.
func (o *HandlerUpdateMiscTransactionsRequest) SetIsApproved(v bool) {
	o.IsApproved = &v
}

// GetTransactionID returns the TransactionID field value
func (o *HandlerUpdateMiscTransactionsRequest) GetTransactionID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransactionID
}

// GetTransactionIDOk returns a tuple with the TransactionID field value
// and a boolean to check if the value has been set.
func (o *HandlerUpdateMiscTransactionsRequest) GetTransactionIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransactionID, true
}

// SetTransactionID sets field value
func (o *HandlerUpdateMiscTransactionsRequest) SetTransactionID(v string) {
	o.TransactionID = v
}

func (o HandlerUpdateMiscTransactionsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HandlerUpdateMiscTransactionsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["approver_id"] = o.ApproverId
	toSerialize["approver_remarks"] = o.ApproverRemarks
	if !IsNil(o.IsApproved) {
		toSerialize["is_approved"] = o.IsApproved
	}
	toSerialize["transactionID"] = o.TransactionID
	return toSerialize, nil
}

func (o *HandlerUpdateMiscTransactionsRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"approver_id",
		"approver_remarks",
		"transactionID",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHandlerUpdateMiscTransactionsRequest := _HandlerUpdateMiscTransactionsRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHandlerUpdateMiscTransactionsRequest)

	if err != nil {
		return err
	}

	*o = HandlerUpdateMiscTransactionsRequest(varHandlerUpdateMiscTransactionsRequest)

	return err
}

type NullableHandlerUpdateMiscTransactionsRequest struct {
	value *HandlerUpdateMiscTransactionsRequest
	isSet bool
}

func (v NullableHandlerUpdateMiscTransactionsRequest) Get() *HandlerUpdateMiscTransactionsRequest {
	return v.value
}

func (v *NullableHandlerUpdateMiscTransactionsRequest) Set(val *HandlerUpdateMiscTransactionsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableHandlerUpdateMiscTransactionsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableHandlerUpdateMiscTransactionsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHandlerUpdateMiscTransactionsRequest(val *HandlerUpdateMiscTransactionsRequest) *NullableHandlerUpdateMiscTransactionsRequest {
	return &NullableHandlerUpdateMiscTransactionsRequest{value: val, isSet: true}
}

func (v NullableHandlerUpdateMiscTransactionsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHandlerUpdateMiscTransactionsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


