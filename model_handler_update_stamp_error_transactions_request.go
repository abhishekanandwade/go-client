/*
Treasury Management API

A comprehensive API for managing addresses, offering endpoints for creation, update, deletion, and retrieval of address data.

API version: 1.0
Contact: support_cept@indiapost.gov.in
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HandlerUpdateStampErrorTransactionsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HandlerUpdateStampErrorTransactionsRequest{}

// HandlerUpdateStampErrorTransactionsRequest struct for HandlerUpdateStampErrorTransactionsRequest
type HandlerUpdateStampErrorTransactionsRequest struct {
	DiffDetails *map[string]int32 `json:"diff-details,omitempty"`
	OfficeId int32 `json:"office-id"`
	Remarks string `json:"remarks"`
	Status *string `json:"status,omitempty"`
	UserId int32 `json:"user-id"`
}

type _HandlerUpdateStampErrorTransactionsRequest HandlerUpdateStampErrorTransactionsRequest

// NewHandlerUpdateStampErrorTransactionsRequest instantiates a new HandlerUpdateStampErrorTransactionsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHandlerUpdateStampErrorTransactionsRequest(officeId int32, remarks string, userId int32) *HandlerUpdateStampErrorTransactionsRequest {
	this := HandlerUpdateStampErrorTransactionsRequest{}
	this.OfficeId = officeId
	this.Remarks = remarks
	this.UserId = userId
	return &this
}

// NewHandlerUpdateStampErrorTransactionsRequestWithDefaults instantiates a new HandlerUpdateStampErrorTransactionsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHandlerUpdateStampErrorTransactionsRequestWithDefaults() *HandlerUpdateStampErrorTransactionsRequest {
	this := HandlerUpdateStampErrorTransactionsRequest{}
	return &this
}

// GetDiffDetails returns the DiffDetails field value if set, zero value otherwise.
func (o *HandlerUpdateStampErrorTransactionsRequest) GetDiffDetails() map[string]int32 {
	if o == nil || IsNil(o.DiffDetails) {
		var ret map[string]int32
		return ret
	}
	return *o.DiffDetails
}

// GetDiffDetailsOk returns a tuple with the DiffDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlerUpdateStampErrorTransactionsRequest) GetDiffDetailsOk() (*map[string]int32, bool) {
	if o == nil || IsNil(o.DiffDetails) {
		return nil, false
	}
	return o.DiffDetails, true
}

// HasDiffDetails returns a boolean if a field has been set.
func (o *HandlerUpdateStampErrorTransactionsRequest) HasDiffDetails() bool {
	if o != nil && !IsNil(o.DiffDetails) {
		return true
	}

	return false
}

// SetDiffDetails gets a reference to the given map[string]int32 and assigns it to the DiffDetails field.
func (o *HandlerUpdateStampErrorTransactionsRequest) SetDiffDetails(v map[string]int32) {
	o.DiffDetails = &v
}

// GetOfficeId returns the OfficeId field value
func (o *HandlerUpdateStampErrorTransactionsRequest) GetOfficeId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.OfficeId
}

// GetOfficeIdOk returns a tuple with the OfficeId field value
// and a boolean to check if the value has been set.
func (o *HandlerUpdateStampErrorTransactionsRequest) GetOfficeIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OfficeId, true
}

// SetOfficeId sets field value
func (o *HandlerUpdateStampErrorTransactionsRequest) SetOfficeId(v int32) {
	o.OfficeId = v
}

// GetRemarks returns the Remarks field value
func (o *HandlerUpdateStampErrorTransactionsRequest) GetRemarks() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Remarks
}

// GetRemarksOk returns a tuple with the Remarks field value
// and a boolean to check if the value has been set.
func (o *HandlerUpdateStampErrorTransactionsRequest) GetRemarksOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Remarks, true
}

// SetRemarks sets field value
func (o *HandlerUpdateStampErrorTransactionsRequest) SetRemarks(v string) {
	o.Remarks = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *HandlerUpdateStampErrorTransactionsRequest) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlerUpdateStampErrorTransactionsRequest) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *HandlerUpdateStampErrorTransactionsRequest) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *HandlerUpdateStampErrorTransactionsRequest) SetStatus(v string) {
	o.Status = &v
}

// GetUserId returns the UserId field value
func (o *HandlerUpdateStampErrorTransactionsRequest) GetUserId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *HandlerUpdateStampErrorTransactionsRequest) GetUserIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *HandlerUpdateStampErrorTransactionsRequest) SetUserId(v int32) {
	o.UserId = v
}

func (o HandlerUpdateStampErrorTransactionsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HandlerUpdateStampErrorTransactionsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DiffDetails) {
		toSerialize["diff-details"] = o.DiffDetails
	}
	toSerialize["office-id"] = o.OfficeId
	toSerialize["remarks"] = o.Remarks
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	toSerialize["user-id"] = o.UserId
	return toSerialize, nil
}

func (o *HandlerUpdateStampErrorTransactionsRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"office-id",
		"remarks",
		"user-id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHandlerUpdateStampErrorTransactionsRequest := _HandlerUpdateStampErrorTransactionsRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHandlerUpdateStampErrorTransactionsRequest)

	if err != nil {
		return err
	}

	*o = HandlerUpdateStampErrorTransactionsRequest(varHandlerUpdateStampErrorTransactionsRequest)

	return err
}

type NullableHandlerUpdateStampErrorTransactionsRequest struct {
	value *HandlerUpdateStampErrorTransactionsRequest
	isSet bool
}

func (v NullableHandlerUpdateStampErrorTransactionsRequest) Get() *HandlerUpdateStampErrorTransactionsRequest {
	return v.value
}

func (v *NullableHandlerUpdateStampErrorTransactionsRequest) Set(val *HandlerUpdateStampErrorTransactionsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableHandlerUpdateStampErrorTransactionsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableHandlerUpdateStampErrorTransactionsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHandlerUpdateStampErrorTransactionsRequest(val *HandlerUpdateStampErrorTransactionsRequest) *NullableHandlerUpdateStampErrorTransactionsRequest {
	return &NullableHandlerUpdateStampErrorTransactionsRequest{value: val, isSet: true}
}

func (v NullableHandlerUpdateStampErrorTransactionsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHandlerUpdateStampErrorTransactionsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


