/*
Treasury Management API

A comprehensive API for managing addresses, offering endpoints for creation, update, deletion, and retrieval of address data.

API version: 1.0
Contact: support_cept@indiapost.gov.in
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HandlerUpdateTransactionsWalletBalanceRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HandlerUpdateTransactionsWalletBalanceRequest{}

// HandlerUpdateTransactionsWalletBalanceRequest struct for HandlerUpdateTransactionsWalletBalanceRequest
type HandlerUpdateTransactionsWalletBalanceRequest struct {
	Amount float32 `json:"amount"`
	OfficeId int32 `json:"office-id"`
	ReceiptOrPayment *string `json:"receipt-or-payment,omitempty"`
	UserId int32 `json:"user-id"`
}

type _HandlerUpdateTransactionsWalletBalanceRequest HandlerUpdateTransactionsWalletBalanceRequest

// NewHandlerUpdateTransactionsWalletBalanceRequest instantiates a new HandlerUpdateTransactionsWalletBalanceRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHandlerUpdateTransactionsWalletBalanceRequest(amount float32, officeId int32, userId int32) *HandlerUpdateTransactionsWalletBalanceRequest {
	this := HandlerUpdateTransactionsWalletBalanceRequest{}
	this.Amount = amount
	this.OfficeId = officeId
	this.UserId = userId
	return &this
}

// NewHandlerUpdateTransactionsWalletBalanceRequestWithDefaults instantiates a new HandlerUpdateTransactionsWalletBalanceRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHandlerUpdateTransactionsWalletBalanceRequestWithDefaults() *HandlerUpdateTransactionsWalletBalanceRequest {
	this := HandlerUpdateTransactionsWalletBalanceRequest{}
	return &this
}

// GetAmount returns the Amount field value
func (o *HandlerUpdateTransactionsWalletBalanceRequest) GetAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *HandlerUpdateTransactionsWalletBalanceRequest) GetAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *HandlerUpdateTransactionsWalletBalanceRequest) SetAmount(v float32) {
	o.Amount = v
}

// GetOfficeId returns the OfficeId field value
func (o *HandlerUpdateTransactionsWalletBalanceRequest) GetOfficeId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.OfficeId
}

// GetOfficeIdOk returns a tuple with the OfficeId field value
// and a boolean to check if the value has been set.
func (o *HandlerUpdateTransactionsWalletBalanceRequest) GetOfficeIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OfficeId, true
}

// SetOfficeId sets field value
func (o *HandlerUpdateTransactionsWalletBalanceRequest) SetOfficeId(v int32) {
	o.OfficeId = v
}

// GetReceiptOrPayment returns the ReceiptOrPayment field value if set, zero value otherwise.
func (o *HandlerUpdateTransactionsWalletBalanceRequest) GetReceiptOrPayment() string {
	if o == nil || IsNil(o.ReceiptOrPayment) {
		var ret string
		return ret
	}
	return *o.ReceiptOrPayment
}

// GetReceiptOrPaymentOk returns a tuple with the ReceiptOrPayment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlerUpdateTransactionsWalletBalanceRequest) GetReceiptOrPaymentOk() (*string, bool) {
	if o == nil || IsNil(o.ReceiptOrPayment) {
		return nil, false
	}
	return o.ReceiptOrPayment, true
}

// HasReceiptOrPayment returns a boolean if a field has been set.
func (o *HandlerUpdateTransactionsWalletBalanceRequest) HasReceiptOrPayment() bool {
	if o != nil && !IsNil(o.ReceiptOrPayment) {
		return true
	}

	return false
}

// SetReceiptOrPayment gets a reference to the given string and assigns it to the ReceiptOrPayment field.
func (o *HandlerUpdateTransactionsWalletBalanceRequest) SetReceiptOrPayment(v string) {
	o.ReceiptOrPayment = &v
}

// GetUserId returns the UserId field value
func (o *HandlerUpdateTransactionsWalletBalanceRequest) GetUserId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *HandlerUpdateTransactionsWalletBalanceRequest) GetUserIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *HandlerUpdateTransactionsWalletBalanceRequest) SetUserId(v int32) {
	o.UserId = v
}

func (o HandlerUpdateTransactionsWalletBalanceRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HandlerUpdateTransactionsWalletBalanceRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["amount"] = o.Amount
	toSerialize["office-id"] = o.OfficeId
	if !IsNil(o.ReceiptOrPayment) {
		toSerialize["receipt-or-payment"] = o.ReceiptOrPayment
	}
	toSerialize["user-id"] = o.UserId
	return toSerialize, nil
}

func (o *HandlerUpdateTransactionsWalletBalanceRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"amount",
		"office-id",
		"user-id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHandlerUpdateTransactionsWalletBalanceRequest := _HandlerUpdateTransactionsWalletBalanceRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHandlerUpdateTransactionsWalletBalanceRequest)

	if err != nil {
		return err
	}

	*o = HandlerUpdateTransactionsWalletBalanceRequest(varHandlerUpdateTransactionsWalletBalanceRequest)

	return err
}

type NullableHandlerUpdateTransactionsWalletBalanceRequest struct {
	value *HandlerUpdateTransactionsWalletBalanceRequest
	isSet bool
}

func (v NullableHandlerUpdateTransactionsWalletBalanceRequest) Get() *HandlerUpdateTransactionsWalletBalanceRequest {
	return v.value
}

func (v *NullableHandlerUpdateTransactionsWalletBalanceRequest) Set(val *HandlerUpdateTransactionsWalletBalanceRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableHandlerUpdateTransactionsWalletBalanceRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableHandlerUpdateTransactionsWalletBalanceRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHandlerUpdateTransactionsWalletBalanceRequest(val *HandlerUpdateTransactionsWalletBalanceRequest) *NullableHandlerUpdateTransactionsWalletBalanceRequest {
	return &NullableHandlerUpdateTransactionsWalletBalanceRequest{value: val, isSet: true}
}

func (v NullableHandlerUpdateTransactionsWalletBalanceRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHandlerUpdateTransactionsWalletBalanceRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


