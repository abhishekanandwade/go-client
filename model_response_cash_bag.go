/*
Treasury Management API

A comprehensive API for managing addresses, offering endpoints for creation, update, deletion, and retrieval of address data.

API version: 1.0
Contact: support_cept@indiapost.gov.in
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ResponseCashBag type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResponseCashBag{}

// ResponseCashBag struct for ResponseCashBag
type ResponseCashBag struct {
	BagWeight *float32 `json:"bag_weight,omitempty"`
	CashBagId *string `json:"cash_bag_id,omitempty"`
	FromOfficeId *int32 `json:"from_office_id,omitempty"`
	FromUserId *int32 `json:"from_user_id,omitempty"`
	ToOfficeId *int32 `json:"to_office_id,omitempty"`
	TransDate *string `json:"trans_date,omitempty"`
	TransIds *string `json:"trans_ids,omitempty"`
}

// NewResponseCashBag instantiates a new ResponseCashBag object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponseCashBag() *ResponseCashBag {
	this := ResponseCashBag{}
	return &this
}

// NewResponseCashBagWithDefaults instantiates a new ResponseCashBag object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponseCashBagWithDefaults() *ResponseCashBag {
	this := ResponseCashBag{}
	return &this
}

// GetBagWeight returns the BagWeight field value if set, zero value otherwise.
func (o *ResponseCashBag) GetBagWeight() float32 {
	if o == nil || IsNil(o.BagWeight) {
		var ret float32
		return ret
	}
	return *o.BagWeight
}

// GetBagWeightOk returns a tuple with the BagWeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseCashBag) GetBagWeightOk() (*float32, bool) {
	if o == nil || IsNil(o.BagWeight) {
		return nil, false
	}
	return o.BagWeight, true
}

// HasBagWeight returns a boolean if a field has been set.
func (o *ResponseCashBag) HasBagWeight() bool {
	if o != nil && !IsNil(o.BagWeight) {
		return true
	}

	return false
}

// SetBagWeight gets a reference to the given float32 and assigns it to the BagWeight field.
func (o *ResponseCashBag) SetBagWeight(v float32) {
	o.BagWeight = &v
}

// GetCashBagId returns the CashBagId field value if set, zero value otherwise.
func (o *ResponseCashBag) GetCashBagId() string {
	if o == nil || IsNil(o.CashBagId) {
		var ret string
		return ret
	}
	return *o.CashBagId
}

// GetCashBagIdOk returns a tuple with the CashBagId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseCashBag) GetCashBagIdOk() (*string, bool) {
	if o == nil || IsNil(o.CashBagId) {
		return nil, false
	}
	return o.CashBagId, true
}

// HasCashBagId returns a boolean if a field has been set.
func (o *ResponseCashBag) HasCashBagId() bool {
	if o != nil && !IsNil(o.CashBagId) {
		return true
	}

	return false
}

// SetCashBagId gets a reference to the given string and assigns it to the CashBagId field.
func (o *ResponseCashBag) SetCashBagId(v string) {
	o.CashBagId = &v
}

// GetFromOfficeId returns the FromOfficeId field value if set, zero value otherwise.
func (o *ResponseCashBag) GetFromOfficeId() int32 {
	if o == nil || IsNil(o.FromOfficeId) {
		var ret int32
		return ret
	}
	return *o.FromOfficeId
}

// GetFromOfficeIdOk returns a tuple with the FromOfficeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseCashBag) GetFromOfficeIdOk() (*int32, bool) {
	if o == nil || IsNil(o.FromOfficeId) {
		return nil, false
	}
	return o.FromOfficeId, true
}

// HasFromOfficeId returns a boolean if a field has been set.
func (o *ResponseCashBag) HasFromOfficeId() bool {
	if o != nil && !IsNil(o.FromOfficeId) {
		return true
	}

	return false
}

// SetFromOfficeId gets a reference to the given int32 and assigns it to the FromOfficeId field.
func (o *ResponseCashBag) SetFromOfficeId(v int32) {
	o.FromOfficeId = &v
}

// GetFromUserId returns the FromUserId field value if set, zero value otherwise.
func (o *ResponseCashBag) GetFromUserId() int32 {
	if o == nil || IsNil(o.FromUserId) {
		var ret int32
		return ret
	}
	return *o.FromUserId
}

// GetFromUserIdOk returns a tuple with the FromUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseCashBag) GetFromUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.FromUserId) {
		return nil, false
	}
	return o.FromUserId, true
}

// HasFromUserId returns a boolean if a field has been set.
func (o *ResponseCashBag) HasFromUserId() bool {
	if o != nil && !IsNil(o.FromUserId) {
		return true
	}

	return false
}

// SetFromUserId gets a reference to the given int32 and assigns it to the FromUserId field.
func (o *ResponseCashBag) SetFromUserId(v int32) {
	o.FromUserId = &v
}

// GetToOfficeId returns the ToOfficeId field value if set, zero value otherwise.
func (o *ResponseCashBag) GetToOfficeId() int32 {
	if o == nil || IsNil(o.ToOfficeId) {
		var ret int32
		return ret
	}
	return *o.ToOfficeId
}

// GetToOfficeIdOk returns a tuple with the ToOfficeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseCashBag) GetToOfficeIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ToOfficeId) {
		return nil, false
	}
	return o.ToOfficeId, true
}

// HasToOfficeId returns a boolean if a field has been set.
func (o *ResponseCashBag) HasToOfficeId() bool {
	if o != nil && !IsNil(o.ToOfficeId) {
		return true
	}

	return false
}

// SetToOfficeId gets a reference to the given int32 and assigns it to the ToOfficeId field.
func (o *ResponseCashBag) SetToOfficeId(v int32) {
	o.ToOfficeId = &v
}

// GetTransDate returns the TransDate field value if set, zero value otherwise.
func (o *ResponseCashBag) GetTransDate() string {
	if o == nil || IsNil(o.TransDate) {
		var ret string
		return ret
	}
	return *o.TransDate
}

// GetTransDateOk returns a tuple with the TransDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseCashBag) GetTransDateOk() (*string, bool) {
	if o == nil || IsNil(o.TransDate) {
		return nil, false
	}
	return o.TransDate, true
}

// HasTransDate returns a boolean if a field has been set.
func (o *ResponseCashBag) HasTransDate() bool {
	if o != nil && !IsNil(o.TransDate) {
		return true
	}

	return false
}

// SetTransDate gets a reference to the given string and assigns it to the TransDate field.
func (o *ResponseCashBag) SetTransDate(v string) {
	o.TransDate = &v
}

// GetTransIds returns the TransIds field value if set, zero value otherwise.
func (o *ResponseCashBag) GetTransIds() string {
	if o == nil || IsNil(o.TransIds) {
		var ret string
		return ret
	}
	return *o.TransIds
}

// GetTransIdsOk returns a tuple with the TransIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseCashBag) GetTransIdsOk() (*string, bool) {
	if o == nil || IsNil(o.TransIds) {
		return nil, false
	}
	return o.TransIds, true
}

// HasTransIds returns a boolean if a field has been set.
func (o *ResponseCashBag) HasTransIds() bool {
	if o != nil && !IsNil(o.TransIds) {
		return true
	}

	return false
}

// SetTransIds gets a reference to the given string and assigns it to the TransIds field.
func (o *ResponseCashBag) SetTransIds(v string) {
	o.TransIds = &v
}

func (o ResponseCashBag) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResponseCashBag) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BagWeight) {
		toSerialize["bag_weight"] = o.BagWeight
	}
	if !IsNil(o.CashBagId) {
		toSerialize["cash_bag_id"] = o.CashBagId
	}
	if !IsNil(o.FromOfficeId) {
		toSerialize["from_office_id"] = o.FromOfficeId
	}
	if !IsNil(o.FromUserId) {
		toSerialize["from_user_id"] = o.FromUserId
	}
	if !IsNil(o.ToOfficeId) {
		toSerialize["to_office_id"] = o.ToOfficeId
	}
	if !IsNil(o.TransDate) {
		toSerialize["trans_date"] = o.TransDate
	}
	if !IsNil(o.TransIds) {
		toSerialize["trans_ids"] = o.TransIds
	}
	return toSerialize, nil
}

type NullableResponseCashBag struct {
	value *ResponseCashBag
	isSet bool
}

func (v NullableResponseCashBag) Get() *ResponseCashBag {
	return v.value
}

func (v *NullableResponseCashBag) Set(val *ResponseCashBag) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseCashBag) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseCashBag) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseCashBag(val *ResponseCashBag) *NullableResponseCashBag {
	return &NullableResponseCashBag{value: val, isSet: true}
}

func (v NullableResponseCashBag) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseCashBag) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


