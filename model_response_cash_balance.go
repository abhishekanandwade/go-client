/*
Treasury Management API

A comprehensive API for managing addresses, offering endpoints for creation, update, deletion, and retrieval of address data.

API version: 1.0
Contact: support_cept@indiapost.gov.in
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ResponseCashBalance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResponseCashBalance{}

// ResponseCashBalance struct for ResponseCashBalance
type ResponseCashBalance struct {
	ClosingBal *float32 `json:"closing_bal,omitempty"`
	ExcessAmt *float32 `json:"excess_amt,omitempty"`
	MaxAmt *float32 `json:"max_amt,omitempty"`
	OfficeName *string `json:"office_name,omitempty"`
	OpeningBal *float32 `json:"opening_bal,omitempty"`
	Payments *float32 `json:"payments,omitempty"`
	Receipts *float32 `json:"receipts,omitempty"`
	TransDate *string `json:"trans_date,omitempty"`
}

// NewResponseCashBalance instantiates a new ResponseCashBalance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponseCashBalance() *ResponseCashBalance {
	this := ResponseCashBalance{}
	return &this
}

// NewResponseCashBalanceWithDefaults instantiates a new ResponseCashBalance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponseCashBalanceWithDefaults() *ResponseCashBalance {
	this := ResponseCashBalance{}
	return &this
}

// GetClosingBal returns the ClosingBal field value if set, zero value otherwise.
func (o *ResponseCashBalance) GetClosingBal() float32 {
	if o == nil || IsNil(o.ClosingBal) {
		var ret float32
		return ret
	}
	return *o.ClosingBal
}

// GetClosingBalOk returns a tuple with the ClosingBal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseCashBalance) GetClosingBalOk() (*float32, bool) {
	if o == nil || IsNil(o.ClosingBal) {
		return nil, false
	}
	return o.ClosingBal, true
}

// HasClosingBal returns a boolean if a field has been set.
func (o *ResponseCashBalance) HasClosingBal() bool {
	if o != nil && !IsNil(o.ClosingBal) {
		return true
	}

	return false
}

// SetClosingBal gets a reference to the given float32 and assigns it to the ClosingBal field.
func (o *ResponseCashBalance) SetClosingBal(v float32) {
	o.ClosingBal = &v
}

// GetExcessAmt returns the ExcessAmt field value if set, zero value otherwise.
func (o *ResponseCashBalance) GetExcessAmt() float32 {
	if o == nil || IsNil(o.ExcessAmt) {
		var ret float32
		return ret
	}
	return *o.ExcessAmt
}

// GetExcessAmtOk returns a tuple with the ExcessAmt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseCashBalance) GetExcessAmtOk() (*float32, bool) {
	if o == nil || IsNil(o.ExcessAmt) {
		return nil, false
	}
	return o.ExcessAmt, true
}

// HasExcessAmt returns a boolean if a field has been set.
func (o *ResponseCashBalance) HasExcessAmt() bool {
	if o != nil && !IsNil(o.ExcessAmt) {
		return true
	}

	return false
}

// SetExcessAmt gets a reference to the given float32 and assigns it to the ExcessAmt field.
func (o *ResponseCashBalance) SetExcessAmt(v float32) {
	o.ExcessAmt = &v
}

// GetMaxAmt returns the MaxAmt field value if set, zero value otherwise.
func (o *ResponseCashBalance) GetMaxAmt() float32 {
	if o == nil || IsNil(o.MaxAmt) {
		var ret float32
		return ret
	}
	return *o.MaxAmt
}

// GetMaxAmtOk returns a tuple with the MaxAmt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseCashBalance) GetMaxAmtOk() (*float32, bool) {
	if o == nil || IsNil(o.MaxAmt) {
		return nil, false
	}
	return o.MaxAmt, true
}

// HasMaxAmt returns a boolean if a field has been set.
func (o *ResponseCashBalance) HasMaxAmt() bool {
	if o != nil && !IsNil(o.MaxAmt) {
		return true
	}

	return false
}

// SetMaxAmt gets a reference to the given float32 and assigns it to the MaxAmt field.
func (o *ResponseCashBalance) SetMaxAmt(v float32) {
	o.MaxAmt = &v
}

// GetOfficeName returns the OfficeName field value if set, zero value otherwise.
func (o *ResponseCashBalance) GetOfficeName() string {
	if o == nil || IsNil(o.OfficeName) {
		var ret string
		return ret
	}
	return *o.OfficeName
}

// GetOfficeNameOk returns a tuple with the OfficeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseCashBalance) GetOfficeNameOk() (*string, bool) {
	if o == nil || IsNil(o.OfficeName) {
		return nil, false
	}
	return o.OfficeName, true
}

// HasOfficeName returns a boolean if a field has been set.
func (o *ResponseCashBalance) HasOfficeName() bool {
	if o != nil && !IsNil(o.OfficeName) {
		return true
	}

	return false
}

// SetOfficeName gets a reference to the given string and assigns it to the OfficeName field.
func (o *ResponseCashBalance) SetOfficeName(v string) {
	o.OfficeName = &v
}

// GetOpeningBal returns the OpeningBal field value if set, zero value otherwise.
func (o *ResponseCashBalance) GetOpeningBal() float32 {
	if o == nil || IsNil(o.OpeningBal) {
		var ret float32
		return ret
	}
	return *o.OpeningBal
}

// GetOpeningBalOk returns a tuple with the OpeningBal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseCashBalance) GetOpeningBalOk() (*float32, bool) {
	if o == nil || IsNil(o.OpeningBal) {
		return nil, false
	}
	return o.OpeningBal, true
}

// HasOpeningBal returns a boolean if a field has been set.
func (o *ResponseCashBalance) HasOpeningBal() bool {
	if o != nil && !IsNil(o.OpeningBal) {
		return true
	}

	return false
}

// SetOpeningBal gets a reference to the given float32 and assigns it to the OpeningBal field.
func (o *ResponseCashBalance) SetOpeningBal(v float32) {
	o.OpeningBal = &v
}

// GetPayments returns the Payments field value if set, zero value otherwise.
func (o *ResponseCashBalance) GetPayments() float32 {
	if o == nil || IsNil(o.Payments) {
		var ret float32
		return ret
	}
	return *o.Payments
}

// GetPaymentsOk returns a tuple with the Payments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseCashBalance) GetPaymentsOk() (*float32, bool) {
	if o == nil || IsNil(o.Payments) {
		return nil, false
	}
	return o.Payments, true
}

// HasPayments returns a boolean if a field has been set.
func (o *ResponseCashBalance) HasPayments() bool {
	if o != nil && !IsNil(o.Payments) {
		return true
	}

	return false
}

// SetPayments gets a reference to the given float32 and assigns it to the Payments field.
func (o *ResponseCashBalance) SetPayments(v float32) {
	o.Payments = &v
}

// GetReceipts returns the Receipts field value if set, zero value otherwise.
func (o *ResponseCashBalance) GetReceipts() float32 {
	if o == nil || IsNil(o.Receipts) {
		var ret float32
		return ret
	}
	return *o.Receipts
}

// GetReceiptsOk returns a tuple with the Receipts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseCashBalance) GetReceiptsOk() (*float32, bool) {
	if o == nil || IsNil(o.Receipts) {
		return nil, false
	}
	return o.Receipts, true
}

// HasReceipts returns a boolean if a field has been set.
func (o *ResponseCashBalance) HasReceipts() bool {
	if o != nil && !IsNil(o.Receipts) {
		return true
	}

	return false
}

// SetReceipts gets a reference to the given float32 and assigns it to the Receipts field.
func (o *ResponseCashBalance) SetReceipts(v float32) {
	o.Receipts = &v
}

// GetTransDate returns the TransDate field value if set, zero value otherwise.
func (o *ResponseCashBalance) GetTransDate() string {
	if o == nil || IsNil(o.TransDate) {
		var ret string
		return ret
	}
	return *o.TransDate
}

// GetTransDateOk returns a tuple with the TransDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseCashBalance) GetTransDateOk() (*string, bool) {
	if o == nil || IsNil(o.TransDate) {
		return nil, false
	}
	return o.TransDate, true
}

// HasTransDate returns a boolean if a field has been set.
func (o *ResponseCashBalance) HasTransDate() bool {
	if o != nil && !IsNil(o.TransDate) {
		return true
	}

	return false
}

// SetTransDate gets a reference to the given string and assigns it to the TransDate field.
func (o *ResponseCashBalance) SetTransDate(v string) {
	o.TransDate = &v
}

func (o ResponseCashBalance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResponseCashBalance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ClosingBal) {
		toSerialize["closing_bal"] = o.ClosingBal
	}
	if !IsNil(o.ExcessAmt) {
		toSerialize["excess_amt"] = o.ExcessAmt
	}
	if !IsNil(o.MaxAmt) {
		toSerialize["max_amt"] = o.MaxAmt
	}
	if !IsNil(o.OfficeName) {
		toSerialize["office_name"] = o.OfficeName
	}
	if !IsNil(o.OpeningBal) {
		toSerialize["opening_bal"] = o.OpeningBal
	}
	if !IsNil(o.Payments) {
		toSerialize["payments"] = o.Payments
	}
	if !IsNil(o.Receipts) {
		toSerialize["receipts"] = o.Receipts
	}
	if !IsNil(o.TransDate) {
		toSerialize["trans_date"] = o.TransDate
	}
	return toSerialize, nil
}

type NullableResponseCashBalance struct {
	value *ResponseCashBalance
	isSet bool
}

func (v NullableResponseCashBalance) Get() *ResponseCashBalance {
	return v.value
}

func (v *NullableResponseCashBalance) Set(val *ResponseCashBalance) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseCashBalance) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseCashBalance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseCashBalance(val *ResponseCashBalance) *NullableResponseCashBalance {
	return &NullableResponseCashBalance{value: val, isSet: true}
}

func (v NullableResponseCashBalance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseCashBalance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


