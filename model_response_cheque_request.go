/*
Treasury Management API

A comprehensive API for managing addresses, offering endpoints for creation, update, deletion, and retrieval of address data.

API version: 1.0
Contact: support_cept@indiapost.gov.in
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ResponseChequeRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResponseChequeRequest{}

// ResponseChequeRequest struct for ResponseChequeRequest
type ResponseChequeRequest struct {
	ChequeAmount *float32 `json:"cheque_amount,omitempty"`
	ChequeDate *string `json:"cheque_date,omitempty"`
	ChequeNo *string `json:"cheque_no,omitempty"`
	DisposedBy *string `json:"disposed_by,omitempty"`
	DisposedDate *string `json:"disposed_date,omitempty"`
	IsBankDrawl *bool `json:"is_bank_drawl,omitempty"`
	PayeeName *string `json:"payee_name,omitempty"`
	Remarks *string `json:"remarks,omitempty"`
	RequestId *string `json:"request_id,omitempty"`
	RequestSource *string `json:"request_source,omitempty"`
	TransactionDate *string `json:"transaction_date,omitempty"`
	TransactionId *string `json:"transaction_id,omitempty"`
}

// NewResponseChequeRequest instantiates a new ResponseChequeRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponseChequeRequest() *ResponseChequeRequest {
	this := ResponseChequeRequest{}
	return &this
}

// NewResponseChequeRequestWithDefaults instantiates a new ResponseChequeRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponseChequeRequestWithDefaults() *ResponseChequeRequest {
	this := ResponseChequeRequest{}
	return &this
}

// GetChequeAmount returns the ChequeAmount field value if set, zero value otherwise.
func (o *ResponseChequeRequest) GetChequeAmount() float32 {
	if o == nil || IsNil(o.ChequeAmount) {
		var ret float32
		return ret
	}
	return *o.ChequeAmount
}

// GetChequeAmountOk returns a tuple with the ChequeAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseChequeRequest) GetChequeAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.ChequeAmount) {
		return nil, false
	}
	return o.ChequeAmount, true
}

// HasChequeAmount returns a boolean if a field has been set.
func (o *ResponseChequeRequest) HasChequeAmount() bool {
	if o != nil && !IsNil(o.ChequeAmount) {
		return true
	}

	return false
}

// SetChequeAmount gets a reference to the given float32 and assigns it to the ChequeAmount field.
func (o *ResponseChequeRequest) SetChequeAmount(v float32) {
	o.ChequeAmount = &v
}

// GetChequeDate returns the ChequeDate field value if set, zero value otherwise.
func (o *ResponseChequeRequest) GetChequeDate() string {
	if o == nil || IsNil(o.ChequeDate) {
		var ret string
		return ret
	}
	return *o.ChequeDate
}

// GetChequeDateOk returns a tuple with the ChequeDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseChequeRequest) GetChequeDateOk() (*string, bool) {
	if o == nil || IsNil(o.ChequeDate) {
		return nil, false
	}
	return o.ChequeDate, true
}

// HasChequeDate returns a boolean if a field has been set.
func (o *ResponseChequeRequest) HasChequeDate() bool {
	if o != nil && !IsNil(o.ChequeDate) {
		return true
	}

	return false
}

// SetChequeDate gets a reference to the given string and assigns it to the ChequeDate field.
func (o *ResponseChequeRequest) SetChequeDate(v string) {
	o.ChequeDate = &v
}

// GetChequeNo returns the ChequeNo field value if set, zero value otherwise.
func (o *ResponseChequeRequest) GetChequeNo() string {
	if o == nil || IsNil(o.ChequeNo) {
		var ret string
		return ret
	}
	return *o.ChequeNo
}

// GetChequeNoOk returns a tuple with the ChequeNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseChequeRequest) GetChequeNoOk() (*string, bool) {
	if o == nil || IsNil(o.ChequeNo) {
		return nil, false
	}
	return o.ChequeNo, true
}

// HasChequeNo returns a boolean if a field has been set.
func (o *ResponseChequeRequest) HasChequeNo() bool {
	if o != nil && !IsNil(o.ChequeNo) {
		return true
	}

	return false
}

// SetChequeNo gets a reference to the given string and assigns it to the ChequeNo field.
func (o *ResponseChequeRequest) SetChequeNo(v string) {
	o.ChequeNo = &v
}

// GetDisposedBy returns the DisposedBy field value if set, zero value otherwise.
func (o *ResponseChequeRequest) GetDisposedBy() string {
	if o == nil || IsNil(o.DisposedBy) {
		var ret string
		return ret
	}
	return *o.DisposedBy
}

// GetDisposedByOk returns a tuple with the DisposedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseChequeRequest) GetDisposedByOk() (*string, bool) {
	if o == nil || IsNil(o.DisposedBy) {
		return nil, false
	}
	return o.DisposedBy, true
}

// HasDisposedBy returns a boolean if a field has been set.
func (o *ResponseChequeRequest) HasDisposedBy() bool {
	if o != nil && !IsNil(o.DisposedBy) {
		return true
	}

	return false
}

// SetDisposedBy gets a reference to the given string and assigns it to the DisposedBy field.
func (o *ResponseChequeRequest) SetDisposedBy(v string) {
	o.DisposedBy = &v
}

// GetDisposedDate returns the DisposedDate field value if set, zero value otherwise.
func (o *ResponseChequeRequest) GetDisposedDate() string {
	if o == nil || IsNil(o.DisposedDate) {
		var ret string
		return ret
	}
	return *o.DisposedDate
}

// GetDisposedDateOk returns a tuple with the DisposedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseChequeRequest) GetDisposedDateOk() (*string, bool) {
	if o == nil || IsNil(o.DisposedDate) {
		return nil, false
	}
	return o.DisposedDate, true
}

// HasDisposedDate returns a boolean if a field has been set.
func (o *ResponseChequeRequest) HasDisposedDate() bool {
	if o != nil && !IsNil(o.DisposedDate) {
		return true
	}

	return false
}

// SetDisposedDate gets a reference to the given string and assigns it to the DisposedDate field.
func (o *ResponseChequeRequest) SetDisposedDate(v string) {
	o.DisposedDate = &v
}

// GetIsBankDrawl returns the IsBankDrawl field value if set, zero value otherwise.
func (o *ResponseChequeRequest) GetIsBankDrawl() bool {
	if o == nil || IsNil(o.IsBankDrawl) {
		var ret bool
		return ret
	}
	return *o.IsBankDrawl
}

// GetIsBankDrawlOk returns a tuple with the IsBankDrawl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseChequeRequest) GetIsBankDrawlOk() (*bool, bool) {
	if o == nil || IsNil(o.IsBankDrawl) {
		return nil, false
	}
	return o.IsBankDrawl, true
}

// HasIsBankDrawl returns a boolean if a field has been set.
func (o *ResponseChequeRequest) HasIsBankDrawl() bool {
	if o != nil && !IsNil(o.IsBankDrawl) {
		return true
	}

	return false
}

// SetIsBankDrawl gets a reference to the given bool and assigns it to the IsBankDrawl field.
func (o *ResponseChequeRequest) SetIsBankDrawl(v bool) {
	o.IsBankDrawl = &v
}

// GetPayeeName returns the PayeeName field value if set, zero value otherwise.
func (o *ResponseChequeRequest) GetPayeeName() string {
	if o == nil || IsNil(o.PayeeName) {
		var ret string
		return ret
	}
	return *o.PayeeName
}

// GetPayeeNameOk returns a tuple with the PayeeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseChequeRequest) GetPayeeNameOk() (*string, bool) {
	if o == nil || IsNil(o.PayeeName) {
		return nil, false
	}
	return o.PayeeName, true
}

// HasPayeeName returns a boolean if a field has been set.
func (o *ResponseChequeRequest) HasPayeeName() bool {
	if o != nil && !IsNil(o.PayeeName) {
		return true
	}

	return false
}

// SetPayeeName gets a reference to the given string and assigns it to the PayeeName field.
func (o *ResponseChequeRequest) SetPayeeName(v string) {
	o.PayeeName = &v
}

// GetRemarks returns the Remarks field value if set, zero value otherwise.
func (o *ResponseChequeRequest) GetRemarks() string {
	if o == nil || IsNil(o.Remarks) {
		var ret string
		return ret
	}
	return *o.Remarks
}

// GetRemarksOk returns a tuple with the Remarks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseChequeRequest) GetRemarksOk() (*string, bool) {
	if o == nil || IsNil(o.Remarks) {
		return nil, false
	}
	return o.Remarks, true
}

// HasRemarks returns a boolean if a field has been set.
func (o *ResponseChequeRequest) HasRemarks() bool {
	if o != nil && !IsNil(o.Remarks) {
		return true
	}

	return false
}

// SetRemarks gets a reference to the given string and assigns it to the Remarks field.
func (o *ResponseChequeRequest) SetRemarks(v string) {
	o.Remarks = &v
}

// GetRequestId returns the RequestId field value if set, zero value otherwise.
func (o *ResponseChequeRequest) GetRequestId() string {
	if o == nil || IsNil(o.RequestId) {
		var ret string
		return ret
	}
	return *o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseChequeRequest) GetRequestIdOk() (*string, bool) {
	if o == nil || IsNil(o.RequestId) {
		return nil, false
	}
	return o.RequestId, true
}

// HasRequestId returns a boolean if a field has been set.
func (o *ResponseChequeRequest) HasRequestId() bool {
	if o != nil && !IsNil(o.RequestId) {
		return true
	}

	return false
}

// SetRequestId gets a reference to the given string and assigns it to the RequestId field.
func (o *ResponseChequeRequest) SetRequestId(v string) {
	o.RequestId = &v
}

// GetRequestSource returns the RequestSource field value if set, zero value otherwise.
func (o *ResponseChequeRequest) GetRequestSource() string {
	if o == nil || IsNil(o.RequestSource) {
		var ret string
		return ret
	}
	return *o.RequestSource
}

// GetRequestSourceOk returns a tuple with the RequestSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseChequeRequest) GetRequestSourceOk() (*string, bool) {
	if o == nil || IsNil(o.RequestSource) {
		return nil, false
	}
	return o.RequestSource, true
}

// HasRequestSource returns a boolean if a field has been set.
func (o *ResponseChequeRequest) HasRequestSource() bool {
	if o != nil && !IsNil(o.RequestSource) {
		return true
	}

	return false
}

// SetRequestSource gets a reference to the given string and assigns it to the RequestSource field.
func (o *ResponseChequeRequest) SetRequestSource(v string) {
	o.RequestSource = &v
}

// GetTransactionDate returns the TransactionDate field value if set, zero value otherwise.
func (o *ResponseChequeRequest) GetTransactionDate() string {
	if o == nil || IsNil(o.TransactionDate) {
		var ret string
		return ret
	}
	return *o.TransactionDate
}

// GetTransactionDateOk returns a tuple with the TransactionDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseChequeRequest) GetTransactionDateOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionDate) {
		return nil, false
	}
	return o.TransactionDate, true
}

// HasTransactionDate returns a boolean if a field has been set.
func (o *ResponseChequeRequest) HasTransactionDate() bool {
	if o != nil && !IsNil(o.TransactionDate) {
		return true
	}

	return false
}

// SetTransactionDate gets a reference to the given string and assigns it to the TransactionDate field.
func (o *ResponseChequeRequest) SetTransactionDate(v string) {
	o.TransactionDate = &v
}

// GetTransactionId returns the TransactionId field value if set, zero value otherwise.
func (o *ResponseChequeRequest) GetTransactionId() string {
	if o == nil || IsNil(o.TransactionId) {
		var ret string
		return ret
	}
	return *o.TransactionId
}

// GetTransactionIdOk returns a tuple with the TransactionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseChequeRequest) GetTransactionIdOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionId) {
		return nil, false
	}
	return o.TransactionId, true
}

// HasTransactionId returns a boolean if a field has been set.
func (o *ResponseChequeRequest) HasTransactionId() bool {
	if o != nil && !IsNil(o.TransactionId) {
		return true
	}

	return false
}

// SetTransactionId gets a reference to the given string and assigns it to the TransactionId field.
func (o *ResponseChequeRequest) SetTransactionId(v string) {
	o.TransactionId = &v
}

func (o ResponseChequeRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResponseChequeRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ChequeAmount) {
		toSerialize["cheque_amount"] = o.ChequeAmount
	}
	if !IsNil(o.ChequeDate) {
		toSerialize["cheque_date"] = o.ChequeDate
	}
	if !IsNil(o.ChequeNo) {
		toSerialize["cheque_no"] = o.ChequeNo
	}
	if !IsNil(o.DisposedBy) {
		toSerialize["disposed_by"] = o.DisposedBy
	}
	if !IsNil(o.DisposedDate) {
		toSerialize["disposed_date"] = o.DisposedDate
	}
	if !IsNil(o.IsBankDrawl) {
		toSerialize["is_bank_drawl"] = o.IsBankDrawl
	}
	if !IsNil(o.PayeeName) {
		toSerialize["payee_name"] = o.PayeeName
	}
	if !IsNil(o.Remarks) {
		toSerialize["remarks"] = o.Remarks
	}
	if !IsNil(o.RequestId) {
		toSerialize["request_id"] = o.RequestId
	}
	if !IsNil(o.RequestSource) {
		toSerialize["request_source"] = o.RequestSource
	}
	if !IsNil(o.TransactionDate) {
		toSerialize["transaction_date"] = o.TransactionDate
	}
	if !IsNil(o.TransactionId) {
		toSerialize["transaction_id"] = o.TransactionId
	}
	return toSerialize, nil
}

type NullableResponseChequeRequest struct {
	value *ResponseChequeRequest
	isSet bool
}

func (v NullableResponseChequeRequest) Get() *ResponseChequeRequest {
	return v.value
}

func (v *NullableResponseChequeRequest) Set(val *ResponseChequeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseChequeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseChequeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseChequeRequest(val *ResponseChequeRequest) *NullableResponseChequeRequest {
	return &NullableResponseChequeRequest{value: val, isSet: true}
}

func (v NullableResponseChequeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseChequeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


