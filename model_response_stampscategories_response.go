/*
Treasury Management API

A comprehensive API for managing addresses, offering endpoints for creation, update, deletion, and retrieval of address data.

API version: 1.0
Contact: support_cept@indiapost.gov.in
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ResponseStampscategoriesResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResponseStampscategoriesResponse{}

// ResponseStampscategoriesResponse struct for ResponseStampscategoriesResponse
type ResponseStampscategoriesResponse struct {
	CategoryDesc *string `json:"category_desc,omitempty"`
	CategoryId *string `json:"category_id,omitempty"`
	EnteredByUserid *string `json:"entered_by_userid,omitempty"`
	EntryDate *string `json:"entry_date,omitempty"`
	GlCode *string `json:"gl_code,omitempty"`
	UpdateDate *string `json:"update_date,omitempty"`
	UpdatedByUserid *string `json:"updated_by_userid,omitempty"`
	ValidFrom *string `json:"valid_from,omitempty"`
	ValidTo *string `json:"valid_to,omitempty"`
}

// NewResponseStampscategoriesResponse instantiates a new ResponseStampscategoriesResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponseStampscategoriesResponse() *ResponseStampscategoriesResponse {
	this := ResponseStampscategoriesResponse{}
	return &this
}

// NewResponseStampscategoriesResponseWithDefaults instantiates a new ResponseStampscategoriesResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponseStampscategoriesResponseWithDefaults() *ResponseStampscategoriesResponse {
	this := ResponseStampscategoriesResponse{}
	return &this
}

// GetCategoryDesc returns the CategoryDesc field value if set, zero value otherwise.
func (o *ResponseStampscategoriesResponse) GetCategoryDesc() string {
	if o == nil || IsNil(o.CategoryDesc) {
		var ret string
		return ret
	}
	return *o.CategoryDesc
}

// GetCategoryDescOk returns a tuple with the CategoryDesc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseStampscategoriesResponse) GetCategoryDescOk() (*string, bool) {
	if o == nil || IsNil(o.CategoryDesc) {
		return nil, false
	}
	return o.CategoryDesc, true
}

// HasCategoryDesc returns a boolean if a field has been set.
func (o *ResponseStampscategoriesResponse) HasCategoryDesc() bool {
	if o != nil && !IsNil(o.CategoryDesc) {
		return true
	}

	return false
}

// SetCategoryDesc gets a reference to the given string and assigns it to the CategoryDesc field.
func (o *ResponseStampscategoriesResponse) SetCategoryDesc(v string) {
	o.CategoryDesc = &v
}

// GetCategoryId returns the CategoryId field value if set, zero value otherwise.
func (o *ResponseStampscategoriesResponse) GetCategoryId() string {
	if o == nil || IsNil(o.CategoryId) {
		var ret string
		return ret
	}
	return *o.CategoryId
}

// GetCategoryIdOk returns a tuple with the CategoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseStampscategoriesResponse) GetCategoryIdOk() (*string, bool) {
	if o == nil || IsNil(o.CategoryId) {
		return nil, false
	}
	return o.CategoryId, true
}

// HasCategoryId returns a boolean if a field has been set.
func (o *ResponseStampscategoriesResponse) HasCategoryId() bool {
	if o != nil && !IsNil(o.CategoryId) {
		return true
	}

	return false
}

// SetCategoryId gets a reference to the given string and assigns it to the CategoryId field.
func (o *ResponseStampscategoriesResponse) SetCategoryId(v string) {
	o.CategoryId = &v
}

// GetEnteredByUserid returns the EnteredByUserid field value if set, zero value otherwise.
func (o *ResponseStampscategoriesResponse) GetEnteredByUserid() string {
	if o == nil || IsNil(o.EnteredByUserid) {
		var ret string
		return ret
	}
	return *o.EnteredByUserid
}

// GetEnteredByUseridOk returns a tuple with the EnteredByUserid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseStampscategoriesResponse) GetEnteredByUseridOk() (*string, bool) {
	if o == nil || IsNil(o.EnteredByUserid) {
		return nil, false
	}
	return o.EnteredByUserid, true
}

// HasEnteredByUserid returns a boolean if a field has been set.
func (o *ResponseStampscategoriesResponse) HasEnteredByUserid() bool {
	if o != nil && !IsNil(o.EnteredByUserid) {
		return true
	}

	return false
}

// SetEnteredByUserid gets a reference to the given string and assigns it to the EnteredByUserid field.
func (o *ResponseStampscategoriesResponse) SetEnteredByUserid(v string) {
	o.EnteredByUserid = &v
}

// GetEntryDate returns the EntryDate field value if set, zero value otherwise.
func (o *ResponseStampscategoriesResponse) GetEntryDate() string {
	if o == nil || IsNil(o.EntryDate) {
		var ret string
		return ret
	}
	return *o.EntryDate
}

// GetEntryDateOk returns a tuple with the EntryDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseStampscategoriesResponse) GetEntryDateOk() (*string, bool) {
	if o == nil || IsNil(o.EntryDate) {
		return nil, false
	}
	return o.EntryDate, true
}

// HasEntryDate returns a boolean if a field has been set.
func (o *ResponseStampscategoriesResponse) HasEntryDate() bool {
	if o != nil && !IsNil(o.EntryDate) {
		return true
	}

	return false
}

// SetEntryDate gets a reference to the given string and assigns it to the EntryDate field.
func (o *ResponseStampscategoriesResponse) SetEntryDate(v string) {
	o.EntryDate = &v
}

// GetGlCode returns the GlCode field value if set, zero value otherwise.
func (o *ResponseStampscategoriesResponse) GetGlCode() string {
	if o == nil || IsNil(o.GlCode) {
		var ret string
		return ret
	}
	return *o.GlCode
}

// GetGlCodeOk returns a tuple with the GlCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseStampscategoriesResponse) GetGlCodeOk() (*string, bool) {
	if o == nil || IsNil(o.GlCode) {
		return nil, false
	}
	return o.GlCode, true
}

// HasGlCode returns a boolean if a field has been set.
func (o *ResponseStampscategoriesResponse) HasGlCode() bool {
	if o != nil && !IsNil(o.GlCode) {
		return true
	}

	return false
}

// SetGlCode gets a reference to the given string and assigns it to the GlCode field.
func (o *ResponseStampscategoriesResponse) SetGlCode(v string) {
	o.GlCode = &v
}

// GetUpdateDate returns the UpdateDate field value if set, zero value otherwise.
func (o *ResponseStampscategoriesResponse) GetUpdateDate() string {
	if o == nil || IsNil(o.UpdateDate) {
		var ret string
		return ret
	}
	return *o.UpdateDate
}

// GetUpdateDateOk returns a tuple with the UpdateDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseStampscategoriesResponse) GetUpdateDateOk() (*string, bool) {
	if o == nil || IsNil(o.UpdateDate) {
		return nil, false
	}
	return o.UpdateDate, true
}

// HasUpdateDate returns a boolean if a field has been set.
func (o *ResponseStampscategoriesResponse) HasUpdateDate() bool {
	if o != nil && !IsNil(o.UpdateDate) {
		return true
	}

	return false
}

// SetUpdateDate gets a reference to the given string and assigns it to the UpdateDate field.
func (o *ResponseStampscategoriesResponse) SetUpdateDate(v string) {
	o.UpdateDate = &v
}

// GetUpdatedByUserid returns the UpdatedByUserid field value if set, zero value otherwise.
func (o *ResponseStampscategoriesResponse) GetUpdatedByUserid() string {
	if o == nil || IsNil(o.UpdatedByUserid) {
		var ret string
		return ret
	}
	return *o.UpdatedByUserid
}

// GetUpdatedByUseridOk returns a tuple with the UpdatedByUserid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseStampscategoriesResponse) GetUpdatedByUseridOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedByUserid) {
		return nil, false
	}
	return o.UpdatedByUserid, true
}

// HasUpdatedByUserid returns a boolean if a field has been set.
func (o *ResponseStampscategoriesResponse) HasUpdatedByUserid() bool {
	if o != nil && !IsNil(o.UpdatedByUserid) {
		return true
	}

	return false
}

// SetUpdatedByUserid gets a reference to the given string and assigns it to the UpdatedByUserid field.
func (o *ResponseStampscategoriesResponse) SetUpdatedByUserid(v string) {
	o.UpdatedByUserid = &v
}

// GetValidFrom returns the ValidFrom field value if set, zero value otherwise.
func (o *ResponseStampscategoriesResponse) GetValidFrom() string {
	if o == nil || IsNil(o.ValidFrom) {
		var ret string
		return ret
	}
	return *o.ValidFrom
}

// GetValidFromOk returns a tuple with the ValidFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseStampscategoriesResponse) GetValidFromOk() (*string, bool) {
	if o == nil || IsNil(o.ValidFrom) {
		return nil, false
	}
	return o.ValidFrom, true
}

// HasValidFrom returns a boolean if a field has been set.
func (o *ResponseStampscategoriesResponse) HasValidFrom() bool {
	if o != nil && !IsNil(o.ValidFrom) {
		return true
	}

	return false
}

// SetValidFrom gets a reference to the given string and assigns it to the ValidFrom field.
func (o *ResponseStampscategoriesResponse) SetValidFrom(v string) {
	o.ValidFrom = &v
}

// GetValidTo returns the ValidTo field value if set, zero value otherwise.
func (o *ResponseStampscategoriesResponse) GetValidTo() string {
	if o == nil || IsNil(o.ValidTo) {
		var ret string
		return ret
	}
	return *o.ValidTo
}

// GetValidToOk returns a tuple with the ValidTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseStampscategoriesResponse) GetValidToOk() (*string, bool) {
	if o == nil || IsNil(o.ValidTo) {
		return nil, false
	}
	return o.ValidTo, true
}

// HasValidTo returns a boolean if a field has been set.
func (o *ResponseStampscategoriesResponse) HasValidTo() bool {
	if o != nil && !IsNil(o.ValidTo) {
		return true
	}

	return false
}

// SetValidTo gets a reference to the given string and assigns it to the ValidTo field.
func (o *ResponseStampscategoriesResponse) SetValidTo(v string) {
	o.ValidTo = &v
}

func (o ResponseStampscategoriesResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResponseStampscategoriesResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CategoryDesc) {
		toSerialize["category_desc"] = o.CategoryDesc
	}
	if !IsNil(o.CategoryId) {
		toSerialize["category_id"] = o.CategoryId
	}
	if !IsNil(o.EnteredByUserid) {
		toSerialize["entered_by_userid"] = o.EnteredByUserid
	}
	if !IsNil(o.EntryDate) {
		toSerialize["entry_date"] = o.EntryDate
	}
	if !IsNil(o.GlCode) {
		toSerialize["gl_code"] = o.GlCode
	}
	if !IsNil(o.UpdateDate) {
		toSerialize["update_date"] = o.UpdateDate
	}
	if !IsNil(o.UpdatedByUserid) {
		toSerialize["updated_by_userid"] = o.UpdatedByUserid
	}
	if !IsNil(o.ValidFrom) {
		toSerialize["valid_from"] = o.ValidFrom
	}
	if !IsNil(o.ValidTo) {
		toSerialize["valid_to"] = o.ValidTo
	}
	return toSerialize, nil
}

type NullableResponseStampscategoriesResponse struct {
	value *ResponseStampscategoriesResponse
	isSet bool
}

func (v NullableResponseStampscategoriesResponse) Get() *ResponseStampscategoriesResponse {
	return v.value
}

func (v *NullableResponseStampscategoriesResponse) Set(val *ResponseStampscategoriesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseStampscategoriesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseStampscategoriesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseStampscategoriesResponse(val *ResponseStampscategoriesResponse) *NullableResponseStampscategoriesResponse {
	return &NullableResponseStampscategoriesResponse{value: val, isSet: true}
}

func (v NullableResponseStampscategoriesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseStampscategoriesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


