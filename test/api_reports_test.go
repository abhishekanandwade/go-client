/*
Treasury Management API

Testing ReportsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_ReportsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ReportsAPIService OfficesOfficeIdDayBeginEndGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var officeId string

		resp, httpRes, err := apiClient.ReportsAPI.OfficesOfficeIdDayBeginEndGet(context.Background(), officeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsAPIService OfficesOfficeIdReportsCashBalancesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var officeId string

		resp, httpRes, err := apiClient.ReportsAPI.OfficesOfficeIdReportsCashBalancesGet(context.Background(), officeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsAPIService OfficesOfficeIdReportsCashInTransitGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var officeId string

		resp, httpRes, err := apiClient.ReportsAPI.OfficesOfficeIdReportsCashInTransitGet(context.Background(), officeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsAPIService OfficesOfficeIdReportsChequesInTransitGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var officeId string

		resp, httpRes, err := apiClient.ReportsAPI.OfficesOfficeIdReportsChequesInTransitGet(context.Background(), officeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsAPIService OfficesOfficeIdReportsIpoBalancesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var officeId string

		resp, httpRes, err := apiClient.ReportsAPI.OfficesOfficeIdReportsIpoBalancesGet(context.Background(), officeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsAPIService OfficesOfficeIdReportsIposInTransitGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var officeId string

		resp, httpRes, err := apiClient.ReportsAPI.OfficesOfficeIdReportsIposInTransitGet(context.Background(), officeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsAPIService OfficesOfficeIdReportsOutOfStockGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var officeId string

		resp, httpRes, err := apiClient.ReportsAPI.OfficesOfficeIdReportsOutOfStockGet(context.Background(), officeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsAPIService OfficesOfficeIdReportsPostmanTransactionsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var officeId string

		resp, httpRes, err := apiClient.ReportsAPI.OfficesOfficeIdReportsPostmanTransactionsGet(context.Background(), officeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsAPIService OfficesOfficeIdReportsStampBalancesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var officeId string

		resp, httpRes, err := apiClient.ReportsAPI.OfficesOfficeIdReportsStampBalancesGet(context.Background(), officeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsAPIService OfficesOfficeIdReportsStampBalancesLastSupplyGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var officeId string

		resp, httpRes, err := apiClient.ReportsAPI.OfficesOfficeIdReportsStampBalancesLastSupplyGet(context.Background(), officeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsAPIService OfficesOfficeIdReportsStampsInTransitGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var officeId string

		resp, httpRes, err := apiClient.ReportsAPI.OfficesOfficeIdReportsStampsInTransitGet(context.Background(), officeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsAPIService OfficesOfficeIdReportsTcbAllGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var officeId string

		resp, httpRes, err := apiClient.ReportsAPI.OfficesOfficeIdReportsTcbAllGet(context.Background(), officeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsAPIService OfficesOfficeIdReportsTcbDenomDetailsPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var officeId int32

		resp, httpRes, err := apiClient.ReportsAPI.OfficesOfficeIdReportsTcbDenomDetailsPut(context.Background(), officeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsAPIService OfficesOfficeIdReportsTcbNewGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var officeId string

		resp, httpRes, err := apiClient.ReportsAPI.OfficesOfficeIdReportsTcbNewGet(context.Background(), officeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsAPIService OfficesOfficeIdReportsTransitDashboardGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var officeId string

		resp, httpRes, err := apiClient.ReportsAPI.OfficesOfficeIdReportsTransitDashboardGet(context.Background(), officeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
